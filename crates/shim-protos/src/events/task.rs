// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `github.com/containerd/containerd/api/events/task.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:containerd.events.TaskCreate)
pub struct TaskCreate {
    // message fields
    // @@protoc_insertion_point(field:containerd.events.TaskCreate.container_id)
    pub container_id: ::std::string::String,
    // @@protoc_insertion_point(field:containerd.events.TaskCreate.bundle)
    pub bundle: ::std::string::String,
    // @@protoc_insertion_point(field:containerd.events.TaskCreate.rootfs)
    pub rootfs: ::std::vec::Vec<super::mount::Mount>,
    // @@protoc_insertion_point(field:containerd.events.TaskCreate.io)
    pub io: ::protobuf::MessageField<TaskIO>,
    // @@protoc_insertion_point(field:containerd.events.TaskCreate.checkpoint)
    pub checkpoint: ::std::string::String,
    // @@protoc_insertion_point(field:containerd.events.TaskCreate.pid)
    pub pid: u32,
    // special fields
    // @@protoc_insertion_point(special_field:containerd.events.TaskCreate.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TaskCreate {
    fn default() -> &'a TaskCreate {
        <TaskCreate as ::protobuf::Message>::default_instance()
    }
}

impl TaskCreate {
    pub fn new() -> TaskCreate {
        ::std::default::Default::default()
    }

    // string container_id = 1;

    pub fn container_id(&self) -> &str {
        &self.container_id
    }

    pub fn clear_container_id(&mut self) {
        self.container_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_container_id(&mut self, v: ::std::string::String) {
        self.container_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_container_id(&mut self) -> &mut ::std::string::String {
        &mut self.container_id
    }

    // Take field
    pub fn take_container_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.container_id, ::std::string::String::new())
    }

    // string bundle = 2;

    pub fn bundle(&self) -> &str {
        &self.bundle
    }

    pub fn clear_bundle(&mut self) {
        self.bundle.clear();
    }

    // Param is passed by value, moved
    pub fn set_bundle(&mut self, v: ::std::string::String) {
        self.bundle = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bundle(&mut self) -> &mut ::std::string::String {
        &mut self.bundle
    }

    // Take field
    pub fn take_bundle(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bundle, ::std::string::String::new())
    }

    // repeated .containerd.types.Mount rootfs = 3;

    pub fn rootfs(&self) -> &[super::mount::Mount] {
        &self.rootfs
    }

    pub fn clear_rootfs(&mut self) {
        self.rootfs.clear();
    }

    // Param is passed by value, moved
    pub fn set_rootfs(&mut self, v: ::std::vec::Vec<super::mount::Mount>) {
        self.rootfs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rootfs(&mut self) -> &mut ::std::vec::Vec<super::mount::Mount> {
        &mut self.rootfs
    }

    // Take field
    pub fn take_rootfs(&mut self) -> ::std::vec::Vec<super::mount::Mount> {
        ::std::mem::replace(&mut self.rootfs, ::std::vec::Vec::new())
    }

    // .containerd.events.TaskIO io = 4;

    pub fn io(&self) -> &TaskIO {
        self.io.as_ref().unwrap_or_else(|| <TaskIO as ::protobuf::Message>::default_instance())
    }

    pub fn clear_io(&mut self) {
        self.io.clear();
    }

    pub fn has_io(&self) -> bool {
        self.io.is_some()
    }

    // Param is passed by value, moved
    pub fn set_io(&mut self, v: TaskIO) {
        self.io = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_io(&mut self) -> &mut TaskIO {
        self.io.mut_or_insert_default()
    }

    // Take field
    pub fn take_io(&mut self) -> TaskIO {
        self.io.take().unwrap_or_else(|| TaskIO::new())
    }

    // string checkpoint = 5;

    pub fn checkpoint(&self) -> &str {
        &self.checkpoint
    }

    pub fn clear_checkpoint(&mut self) {
        self.checkpoint.clear();
    }

    // Param is passed by value, moved
    pub fn set_checkpoint(&mut self, v: ::std::string::String) {
        self.checkpoint = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_checkpoint(&mut self) -> &mut ::std::string::String {
        &mut self.checkpoint
    }

    // Take field
    pub fn take_checkpoint(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.checkpoint, ::std::string::String::new())
    }

    // uint32 pid = 6;

    pub fn pid(&self) -> u32 {
        self.pid
    }

    pub fn clear_pid(&mut self) {
        self.pid = 0;
    }

    // Param is passed by value, moved
    pub fn set_pid(&mut self, v: u32) {
        self.pid = v;
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "container_id",
            |m: &TaskCreate| { &m.container_id },
            |m: &mut TaskCreate| { &mut m.container_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bundle",
            |m: &TaskCreate| { &m.bundle },
            |m: &mut TaskCreate| { &mut m.bundle },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "rootfs",
            |m: &TaskCreate| { &m.rootfs },
            |m: &mut TaskCreate| { &mut m.rootfs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, TaskIO>(
            "io",
            |m: &TaskCreate| { &m.io },
            |m: &mut TaskCreate| { &mut m.io },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "checkpoint",
            |m: &TaskCreate| { &m.checkpoint },
            |m: &mut TaskCreate| { &mut m.checkpoint },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pid",
            |m: &TaskCreate| { &m.pid },
            |m: &mut TaskCreate| { &mut m.pid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TaskCreate>(
            "TaskCreate",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TaskCreate {
    const NAME: &'static str = "TaskCreate";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.container_id = is.read_string()?;
                },
                18 => {
                    self.bundle = is.read_string()?;
                },
                26 => {
                    self.rootfs.push(is.read_message()?);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.io)?;
                },
                42 => {
                    self.checkpoint = is.read_string()?;
                },
                48 => {
                    self.pid = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.container_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.container_id);
        }
        if !self.bundle.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.bundle);
        }
        for value in &self.rootfs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.io.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.checkpoint.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.checkpoint);
        }
        if self.pid != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.pid);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.container_id.is_empty() {
            os.write_string(1, &self.container_id)?;
        }
        if !self.bundle.is_empty() {
            os.write_string(2, &self.bundle)?;
        }
        for v in &self.rootfs {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if let Some(v) = self.io.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if !self.checkpoint.is_empty() {
            os.write_string(5, &self.checkpoint)?;
        }
        if self.pid != 0 {
            os.write_uint32(6, self.pid)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TaskCreate {
        TaskCreate::new()
    }

    fn clear(&mut self) {
        self.container_id.clear();
        self.bundle.clear();
        self.rootfs.clear();
        self.io.clear();
        self.checkpoint.clear();
        self.pid = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TaskCreate {
        static instance: TaskCreate = TaskCreate {
            container_id: ::std::string::String::new(),
            bundle: ::std::string::String::new(),
            rootfs: ::std::vec::Vec::new(),
            io: ::protobuf::MessageField::none(),
            checkpoint: ::std::string::String::new(),
            pid: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TaskCreate {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TaskCreate").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TaskCreate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TaskCreate {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:containerd.events.TaskStart)
pub struct TaskStart {
    // message fields
    // @@protoc_insertion_point(field:containerd.events.TaskStart.container_id)
    pub container_id: ::std::string::String,
    // @@protoc_insertion_point(field:containerd.events.TaskStart.pid)
    pub pid: u32,
    // special fields
    // @@protoc_insertion_point(special_field:containerd.events.TaskStart.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TaskStart {
    fn default() -> &'a TaskStart {
        <TaskStart as ::protobuf::Message>::default_instance()
    }
}

impl TaskStart {
    pub fn new() -> TaskStart {
        ::std::default::Default::default()
    }

    // string container_id = 1;

    pub fn container_id(&self) -> &str {
        &self.container_id
    }

    pub fn clear_container_id(&mut self) {
        self.container_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_container_id(&mut self, v: ::std::string::String) {
        self.container_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_container_id(&mut self) -> &mut ::std::string::String {
        &mut self.container_id
    }

    // Take field
    pub fn take_container_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.container_id, ::std::string::String::new())
    }

    // uint32 pid = 2;

    pub fn pid(&self) -> u32 {
        self.pid
    }

    pub fn clear_pid(&mut self) {
        self.pid = 0;
    }

    // Param is passed by value, moved
    pub fn set_pid(&mut self, v: u32) {
        self.pid = v;
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "container_id",
            |m: &TaskStart| { &m.container_id },
            |m: &mut TaskStart| { &mut m.container_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pid",
            |m: &TaskStart| { &m.pid },
            |m: &mut TaskStart| { &mut m.pid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TaskStart>(
            "TaskStart",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TaskStart {
    const NAME: &'static str = "TaskStart";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.container_id = is.read_string()?;
                },
                16 => {
                    self.pid = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.container_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.container_id);
        }
        if self.pid != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.pid);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.container_id.is_empty() {
            os.write_string(1, &self.container_id)?;
        }
        if self.pid != 0 {
            os.write_uint32(2, self.pid)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TaskStart {
        TaskStart::new()
    }

    fn clear(&mut self) {
        self.container_id.clear();
        self.pid = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TaskStart {
        static instance: TaskStart = TaskStart {
            container_id: ::std::string::String::new(),
            pid: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TaskStart {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TaskStart").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TaskStart {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TaskStart {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:containerd.events.TaskDelete)
pub struct TaskDelete {
    // message fields
    // @@protoc_insertion_point(field:containerd.events.TaskDelete.container_id)
    pub container_id: ::std::string::String,
    // @@protoc_insertion_point(field:containerd.events.TaskDelete.pid)
    pub pid: u32,
    // @@protoc_insertion_point(field:containerd.events.TaskDelete.exit_status)
    pub exit_status: u32,
    // @@protoc_insertion_point(field:containerd.events.TaskDelete.exited_at)
    pub exited_at: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:containerd.events.TaskDelete.id)
    pub id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:containerd.events.TaskDelete.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TaskDelete {
    fn default() -> &'a TaskDelete {
        <TaskDelete as ::protobuf::Message>::default_instance()
    }
}

impl TaskDelete {
    pub fn new() -> TaskDelete {
        ::std::default::Default::default()
    }

    // string container_id = 1;

    pub fn container_id(&self) -> &str {
        &self.container_id
    }

    pub fn clear_container_id(&mut self) {
        self.container_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_container_id(&mut self, v: ::std::string::String) {
        self.container_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_container_id(&mut self) -> &mut ::std::string::String {
        &mut self.container_id
    }

    // Take field
    pub fn take_container_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.container_id, ::std::string::String::new())
    }

    // uint32 pid = 2;

    pub fn pid(&self) -> u32 {
        self.pid
    }

    pub fn clear_pid(&mut self) {
        self.pid = 0;
    }

    // Param is passed by value, moved
    pub fn set_pid(&mut self, v: u32) {
        self.pid = v;
    }

    // uint32 exit_status = 3;

    pub fn exit_status(&self) -> u32 {
        self.exit_status
    }

    pub fn clear_exit_status(&mut self) {
        self.exit_status = 0;
    }

    // Param is passed by value, moved
    pub fn set_exit_status(&mut self, v: u32) {
        self.exit_status = v;
    }

    // .google.protobuf.Timestamp exited_at = 4;

    pub fn exited_at(&self) -> &::protobuf::well_known_types::timestamp::Timestamp {
        self.exited_at.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::timestamp::Timestamp as ::protobuf::Message>::default_instance())
    }

    pub fn clear_exited_at(&mut self) {
        self.exited_at.clear();
    }

    pub fn has_exited_at(&self) -> bool {
        self.exited_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_exited_at(&mut self, v: ::protobuf::well_known_types::timestamp::Timestamp) {
        self.exited_at = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_exited_at(&mut self) -> &mut ::protobuf::well_known_types::timestamp::Timestamp {
        self.exited_at.mut_or_insert_default()
    }

    // Take field
    pub fn take_exited_at(&mut self) -> ::protobuf::well_known_types::timestamp::Timestamp {
        self.exited_at.take().unwrap_or_else(|| ::protobuf::well_known_types::timestamp::Timestamp::new())
    }

    // string id = 5;

    pub fn id(&self) -> &str {
        &self.id
    }

    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "container_id",
            |m: &TaskDelete| { &m.container_id },
            |m: &mut TaskDelete| { &mut m.container_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pid",
            |m: &TaskDelete| { &m.pid },
            |m: &mut TaskDelete| { &mut m.pid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "exit_status",
            |m: &TaskDelete| { &m.exit_status },
            |m: &mut TaskDelete| { &mut m.exit_status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "exited_at",
            |m: &TaskDelete| { &m.exited_at },
            |m: &mut TaskDelete| { &mut m.exited_at },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &TaskDelete| { &m.id },
            |m: &mut TaskDelete| { &mut m.id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TaskDelete>(
            "TaskDelete",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TaskDelete {
    const NAME: &'static str = "TaskDelete";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.container_id = is.read_string()?;
                },
                16 => {
                    self.pid = is.read_uint32()?;
                },
                24 => {
                    self.exit_status = is.read_uint32()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.exited_at)?;
                },
                42 => {
                    self.id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.container_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.container_id);
        }
        if self.pid != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.pid);
        }
        if self.exit_status != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.exit_status);
        }
        if let Some(v) = self.exited_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.container_id.is_empty() {
            os.write_string(1, &self.container_id)?;
        }
        if self.pid != 0 {
            os.write_uint32(2, self.pid)?;
        }
        if self.exit_status != 0 {
            os.write_uint32(3, self.exit_status)?;
        }
        if let Some(v) = self.exited_at.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if !self.id.is_empty() {
            os.write_string(5, &self.id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TaskDelete {
        TaskDelete::new()
    }

    fn clear(&mut self) {
        self.container_id.clear();
        self.pid = 0;
        self.exit_status = 0;
        self.exited_at.clear();
        self.id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TaskDelete {
        static instance: TaskDelete = TaskDelete {
            container_id: ::std::string::String::new(),
            pid: 0,
            exit_status: 0,
            exited_at: ::protobuf::MessageField::none(),
            id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TaskDelete {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TaskDelete").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TaskDelete {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TaskDelete {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:containerd.events.TaskIO)
pub struct TaskIO {
    // message fields
    // @@protoc_insertion_point(field:containerd.events.TaskIO.stdin)
    pub stdin: ::std::string::String,
    // @@protoc_insertion_point(field:containerd.events.TaskIO.stdout)
    pub stdout: ::std::string::String,
    // @@protoc_insertion_point(field:containerd.events.TaskIO.stderr)
    pub stderr: ::std::string::String,
    // @@protoc_insertion_point(field:containerd.events.TaskIO.terminal)
    pub terminal: bool,
    // special fields
    // @@protoc_insertion_point(special_field:containerd.events.TaskIO.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TaskIO {
    fn default() -> &'a TaskIO {
        <TaskIO as ::protobuf::Message>::default_instance()
    }
}

impl TaskIO {
    pub fn new() -> TaskIO {
        ::std::default::Default::default()
    }

    // string stdin = 1;

    pub fn stdin(&self) -> &str {
        &self.stdin
    }

    pub fn clear_stdin(&mut self) {
        self.stdin.clear();
    }

    // Param is passed by value, moved
    pub fn set_stdin(&mut self, v: ::std::string::String) {
        self.stdin = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stdin(&mut self) -> &mut ::std::string::String {
        &mut self.stdin
    }

    // Take field
    pub fn take_stdin(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.stdin, ::std::string::String::new())
    }

    // string stdout = 2;

    pub fn stdout(&self) -> &str {
        &self.stdout
    }

    pub fn clear_stdout(&mut self) {
        self.stdout.clear();
    }

    // Param is passed by value, moved
    pub fn set_stdout(&mut self, v: ::std::string::String) {
        self.stdout = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stdout(&mut self) -> &mut ::std::string::String {
        &mut self.stdout
    }

    // Take field
    pub fn take_stdout(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.stdout, ::std::string::String::new())
    }

    // string stderr = 3;

    pub fn stderr(&self) -> &str {
        &self.stderr
    }

    pub fn clear_stderr(&mut self) {
        self.stderr.clear();
    }

    // Param is passed by value, moved
    pub fn set_stderr(&mut self, v: ::std::string::String) {
        self.stderr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stderr(&mut self) -> &mut ::std::string::String {
        &mut self.stderr
    }

    // Take field
    pub fn take_stderr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.stderr, ::std::string::String::new())
    }

    // bool terminal = 4;

    pub fn terminal(&self) -> bool {
        self.terminal
    }

    pub fn clear_terminal(&mut self) {
        self.terminal = false;
    }

    // Param is passed by value, moved
    pub fn set_terminal(&mut self, v: bool) {
        self.terminal = v;
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "stdin",
            |m: &TaskIO| { &m.stdin },
            |m: &mut TaskIO| { &mut m.stdin },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "stdout",
            |m: &TaskIO| { &m.stdout },
            |m: &mut TaskIO| { &mut m.stdout },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "stderr",
            |m: &TaskIO| { &m.stderr },
            |m: &mut TaskIO| { &mut m.stderr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "terminal",
            |m: &TaskIO| { &m.terminal },
            |m: &mut TaskIO| { &mut m.terminal },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TaskIO>(
            "TaskIO",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TaskIO {
    const NAME: &'static str = "TaskIO";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.stdin = is.read_string()?;
                },
                18 => {
                    self.stdout = is.read_string()?;
                },
                26 => {
                    self.stderr = is.read_string()?;
                },
                32 => {
                    self.terminal = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.stdin.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.stdin);
        }
        if !self.stdout.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.stdout);
        }
        if !self.stderr.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.stderr);
        }
        if self.terminal != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.stdin.is_empty() {
            os.write_string(1, &self.stdin)?;
        }
        if !self.stdout.is_empty() {
            os.write_string(2, &self.stdout)?;
        }
        if !self.stderr.is_empty() {
            os.write_string(3, &self.stderr)?;
        }
        if self.terminal != false {
            os.write_bool(4, self.terminal)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TaskIO {
        TaskIO::new()
    }

    fn clear(&mut self) {
        self.stdin.clear();
        self.stdout.clear();
        self.stderr.clear();
        self.terminal = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TaskIO {
        static instance: TaskIO = TaskIO {
            stdin: ::std::string::String::new(),
            stdout: ::std::string::String::new(),
            stderr: ::std::string::String::new(),
            terminal: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TaskIO {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TaskIO").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TaskIO {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TaskIO {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:containerd.events.TaskExit)
pub struct TaskExit {
    // message fields
    // @@protoc_insertion_point(field:containerd.events.TaskExit.container_id)
    pub container_id: ::std::string::String,
    // @@protoc_insertion_point(field:containerd.events.TaskExit.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:containerd.events.TaskExit.pid)
    pub pid: u32,
    // @@protoc_insertion_point(field:containerd.events.TaskExit.exit_status)
    pub exit_status: u32,
    // @@protoc_insertion_point(field:containerd.events.TaskExit.exited_at)
    pub exited_at: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:containerd.events.TaskExit.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TaskExit {
    fn default() -> &'a TaskExit {
        <TaskExit as ::protobuf::Message>::default_instance()
    }
}

impl TaskExit {
    pub fn new() -> TaskExit {
        ::std::default::Default::default()
    }

    // string container_id = 1;

    pub fn container_id(&self) -> &str {
        &self.container_id
    }

    pub fn clear_container_id(&mut self) {
        self.container_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_container_id(&mut self, v: ::std::string::String) {
        self.container_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_container_id(&mut self) -> &mut ::std::string::String {
        &mut self.container_id
    }

    // Take field
    pub fn take_container_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.container_id, ::std::string::String::new())
    }

    // string id = 2;

    pub fn id(&self) -> &str {
        &self.id
    }

    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // uint32 pid = 3;

    pub fn pid(&self) -> u32 {
        self.pid
    }

    pub fn clear_pid(&mut self) {
        self.pid = 0;
    }

    // Param is passed by value, moved
    pub fn set_pid(&mut self, v: u32) {
        self.pid = v;
    }

    // uint32 exit_status = 4;

    pub fn exit_status(&self) -> u32 {
        self.exit_status
    }

    pub fn clear_exit_status(&mut self) {
        self.exit_status = 0;
    }

    // Param is passed by value, moved
    pub fn set_exit_status(&mut self, v: u32) {
        self.exit_status = v;
    }

    // .google.protobuf.Timestamp exited_at = 5;

    pub fn exited_at(&self) -> &::protobuf::well_known_types::timestamp::Timestamp {
        self.exited_at.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::timestamp::Timestamp as ::protobuf::Message>::default_instance())
    }

    pub fn clear_exited_at(&mut self) {
        self.exited_at.clear();
    }

    pub fn has_exited_at(&self) -> bool {
        self.exited_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_exited_at(&mut self, v: ::protobuf::well_known_types::timestamp::Timestamp) {
        self.exited_at = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_exited_at(&mut self) -> &mut ::protobuf::well_known_types::timestamp::Timestamp {
        self.exited_at.mut_or_insert_default()
    }

    // Take field
    pub fn take_exited_at(&mut self) -> ::protobuf::well_known_types::timestamp::Timestamp {
        self.exited_at.take().unwrap_or_else(|| ::protobuf::well_known_types::timestamp::Timestamp::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "container_id",
            |m: &TaskExit| { &m.container_id },
            |m: &mut TaskExit| { &mut m.container_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &TaskExit| { &m.id },
            |m: &mut TaskExit| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pid",
            |m: &TaskExit| { &m.pid },
            |m: &mut TaskExit| { &mut m.pid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "exit_status",
            |m: &TaskExit| { &m.exit_status },
            |m: &mut TaskExit| { &mut m.exit_status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "exited_at",
            |m: &TaskExit| { &m.exited_at },
            |m: &mut TaskExit| { &mut m.exited_at },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TaskExit>(
            "TaskExit",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TaskExit {
    const NAME: &'static str = "TaskExit";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.container_id = is.read_string()?;
                },
                18 => {
                    self.id = is.read_string()?;
                },
                24 => {
                    self.pid = is.read_uint32()?;
                },
                32 => {
                    self.exit_status = is.read_uint32()?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.exited_at)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.container_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.container_id);
        }
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.id);
        }
        if self.pid != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.pid);
        }
        if self.exit_status != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.exit_status);
        }
        if let Some(v) = self.exited_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.container_id.is_empty() {
            os.write_string(1, &self.container_id)?;
        }
        if !self.id.is_empty() {
            os.write_string(2, &self.id)?;
        }
        if self.pid != 0 {
            os.write_uint32(3, self.pid)?;
        }
        if self.exit_status != 0 {
            os.write_uint32(4, self.exit_status)?;
        }
        if let Some(v) = self.exited_at.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TaskExit {
        TaskExit::new()
    }

    fn clear(&mut self) {
        self.container_id.clear();
        self.id.clear();
        self.pid = 0;
        self.exit_status = 0;
        self.exited_at.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TaskExit {
        static instance: TaskExit = TaskExit {
            container_id: ::std::string::String::new(),
            id: ::std::string::String::new(),
            pid: 0,
            exit_status: 0,
            exited_at: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TaskExit {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TaskExit").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TaskExit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TaskExit {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:containerd.events.TaskOOM)
pub struct TaskOOM {
    // message fields
    // @@protoc_insertion_point(field:containerd.events.TaskOOM.container_id)
    pub container_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:containerd.events.TaskOOM.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TaskOOM {
    fn default() -> &'a TaskOOM {
        <TaskOOM as ::protobuf::Message>::default_instance()
    }
}

impl TaskOOM {
    pub fn new() -> TaskOOM {
        ::std::default::Default::default()
    }

    // string container_id = 1;

    pub fn container_id(&self) -> &str {
        &self.container_id
    }

    pub fn clear_container_id(&mut self) {
        self.container_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_container_id(&mut self, v: ::std::string::String) {
        self.container_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_container_id(&mut self) -> &mut ::std::string::String {
        &mut self.container_id
    }

    // Take field
    pub fn take_container_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.container_id, ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "container_id",
            |m: &TaskOOM| { &m.container_id },
            |m: &mut TaskOOM| { &mut m.container_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TaskOOM>(
            "TaskOOM",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TaskOOM {
    const NAME: &'static str = "TaskOOM";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.container_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.container_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.container_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.container_id.is_empty() {
            os.write_string(1, &self.container_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TaskOOM {
        TaskOOM::new()
    }

    fn clear(&mut self) {
        self.container_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TaskOOM {
        static instance: TaskOOM = TaskOOM {
            container_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TaskOOM {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TaskOOM").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TaskOOM {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TaskOOM {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:containerd.events.TaskExecAdded)
pub struct TaskExecAdded {
    // message fields
    // @@protoc_insertion_point(field:containerd.events.TaskExecAdded.container_id)
    pub container_id: ::std::string::String,
    // @@protoc_insertion_point(field:containerd.events.TaskExecAdded.exec_id)
    pub exec_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:containerd.events.TaskExecAdded.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TaskExecAdded {
    fn default() -> &'a TaskExecAdded {
        <TaskExecAdded as ::protobuf::Message>::default_instance()
    }
}

impl TaskExecAdded {
    pub fn new() -> TaskExecAdded {
        ::std::default::Default::default()
    }

    // string container_id = 1;

    pub fn container_id(&self) -> &str {
        &self.container_id
    }

    pub fn clear_container_id(&mut self) {
        self.container_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_container_id(&mut self, v: ::std::string::String) {
        self.container_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_container_id(&mut self) -> &mut ::std::string::String {
        &mut self.container_id
    }

    // Take field
    pub fn take_container_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.container_id, ::std::string::String::new())
    }

    // string exec_id = 2;

    pub fn exec_id(&self) -> &str {
        &self.exec_id
    }

    pub fn clear_exec_id(&mut self) {
        self.exec_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_exec_id(&mut self, v: ::std::string::String) {
        self.exec_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_exec_id(&mut self) -> &mut ::std::string::String {
        &mut self.exec_id
    }

    // Take field
    pub fn take_exec_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.exec_id, ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "container_id",
            |m: &TaskExecAdded| { &m.container_id },
            |m: &mut TaskExecAdded| { &mut m.container_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "exec_id",
            |m: &TaskExecAdded| { &m.exec_id },
            |m: &mut TaskExecAdded| { &mut m.exec_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TaskExecAdded>(
            "TaskExecAdded",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TaskExecAdded {
    const NAME: &'static str = "TaskExecAdded";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.container_id = is.read_string()?;
                },
                18 => {
                    self.exec_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.container_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.container_id);
        }
        if !self.exec_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.exec_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.container_id.is_empty() {
            os.write_string(1, &self.container_id)?;
        }
        if !self.exec_id.is_empty() {
            os.write_string(2, &self.exec_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TaskExecAdded {
        TaskExecAdded::new()
    }

    fn clear(&mut self) {
        self.container_id.clear();
        self.exec_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TaskExecAdded {
        static instance: TaskExecAdded = TaskExecAdded {
            container_id: ::std::string::String::new(),
            exec_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TaskExecAdded {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TaskExecAdded").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TaskExecAdded {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TaskExecAdded {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:containerd.events.TaskExecStarted)
pub struct TaskExecStarted {
    // message fields
    // @@protoc_insertion_point(field:containerd.events.TaskExecStarted.container_id)
    pub container_id: ::std::string::String,
    // @@protoc_insertion_point(field:containerd.events.TaskExecStarted.exec_id)
    pub exec_id: ::std::string::String,
    // @@protoc_insertion_point(field:containerd.events.TaskExecStarted.pid)
    pub pid: u32,
    // special fields
    // @@protoc_insertion_point(special_field:containerd.events.TaskExecStarted.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TaskExecStarted {
    fn default() -> &'a TaskExecStarted {
        <TaskExecStarted as ::protobuf::Message>::default_instance()
    }
}

impl TaskExecStarted {
    pub fn new() -> TaskExecStarted {
        ::std::default::Default::default()
    }

    // string container_id = 1;

    pub fn container_id(&self) -> &str {
        &self.container_id
    }

    pub fn clear_container_id(&mut self) {
        self.container_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_container_id(&mut self, v: ::std::string::String) {
        self.container_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_container_id(&mut self) -> &mut ::std::string::String {
        &mut self.container_id
    }

    // Take field
    pub fn take_container_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.container_id, ::std::string::String::new())
    }

    // string exec_id = 2;

    pub fn exec_id(&self) -> &str {
        &self.exec_id
    }

    pub fn clear_exec_id(&mut self) {
        self.exec_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_exec_id(&mut self, v: ::std::string::String) {
        self.exec_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_exec_id(&mut self) -> &mut ::std::string::String {
        &mut self.exec_id
    }

    // Take field
    pub fn take_exec_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.exec_id, ::std::string::String::new())
    }

    // uint32 pid = 3;

    pub fn pid(&self) -> u32 {
        self.pid
    }

    pub fn clear_pid(&mut self) {
        self.pid = 0;
    }

    // Param is passed by value, moved
    pub fn set_pid(&mut self, v: u32) {
        self.pid = v;
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "container_id",
            |m: &TaskExecStarted| { &m.container_id },
            |m: &mut TaskExecStarted| { &mut m.container_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "exec_id",
            |m: &TaskExecStarted| { &m.exec_id },
            |m: &mut TaskExecStarted| { &mut m.exec_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pid",
            |m: &TaskExecStarted| { &m.pid },
            |m: &mut TaskExecStarted| { &mut m.pid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TaskExecStarted>(
            "TaskExecStarted",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TaskExecStarted {
    const NAME: &'static str = "TaskExecStarted";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.container_id = is.read_string()?;
                },
                18 => {
                    self.exec_id = is.read_string()?;
                },
                24 => {
                    self.pid = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.container_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.container_id);
        }
        if !self.exec_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.exec_id);
        }
        if self.pid != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.pid);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.container_id.is_empty() {
            os.write_string(1, &self.container_id)?;
        }
        if !self.exec_id.is_empty() {
            os.write_string(2, &self.exec_id)?;
        }
        if self.pid != 0 {
            os.write_uint32(3, self.pid)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TaskExecStarted {
        TaskExecStarted::new()
    }

    fn clear(&mut self) {
        self.container_id.clear();
        self.exec_id.clear();
        self.pid = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TaskExecStarted {
        static instance: TaskExecStarted = TaskExecStarted {
            container_id: ::std::string::String::new(),
            exec_id: ::std::string::String::new(),
            pid: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TaskExecStarted {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TaskExecStarted").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TaskExecStarted {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TaskExecStarted {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:containerd.events.TaskPaused)
pub struct TaskPaused {
    // message fields
    // @@protoc_insertion_point(field:containerd.events.TaskPaused.container_id)
    pub container_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:containerd.events.TaskPaused.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TaskPaused {
    fn default() -> &'a TaskPaused {
        <TaskPaused as ::protobuf::Message>::default_instance()
    }
}

impl TaskPaused {
    pub fn new() -> TaskPaused {
        ::std::default::Default::default()
    }

    // string container_id = 1;

    pub fn container_id(&self) -> &str {
        &self.container_id
    }

    pub fn clear_container_id(&mut self) {
        self.container_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_container_id(&mut self, v: ::std::string::String) {
        self.container_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_container_id(&mut self) -> &mut ::std::string::String {
        &mut self.container_id
    }

    // Take field
    pub fn take_container_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.container_id, ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "container_id",
            |m: &TaskPaused| { &m.container_id },
            |m: &mut TaskPaused| { &mut m.container_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TaskPaused>(
            "TaskPaused",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TaskPaused {
    const NAME: &'static str = "TaskPaused";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.container_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.container_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.container_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.container_id.is_empty() {
            os.write_string(1, &self.container_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TaskPaused {
        TaskPaused::new()
    }

    fn clear(&mut self) {
        self.container_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TaskPaused {
        static instance: TaskPaused = TaskPaused {
            container_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TaskPaused {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TaskPaused").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TaskPaused {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TaskPaused {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:containerd.events.TaskResumed)
pub struct TaskResumed {
    // message fields
    // @@protoc_insertion_point(field:containerd.events.TaskResumed.container_id)
    pub container_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:containerd.events.TaskResumed.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TaskResumed {
    fn default() -> &'a TaskResumed {
        <TaskResumed as ::protobuf::Message>::default_instance()
    }
}

impl TaskResumed {
    pub fn new() -> TaskResumed {
        ::std::default::Default::default()
    }

    // string container_id = 1;

    pub fn container_id(&self) -> &str {
        &self.container_id
    }

    pub fn clear_container_id(&mut self) {
        self.container_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_container_id(&mut self, v: ::std::string::String) {
        self.container_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_container_id(&mut self) -> &mut ::std::string::String {
        &mut self.container_id
    }

    // Take field
    pub fn take_container_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.container_id, ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "container_id",
            |m: &TaskResumed| { &m.container_id },
            |m: &mut TaskResumed| { &mut m.container_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TaskResumed>(
            "TaskResumed",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TaskResumed {
    const NAME: &'static str = "TaskResumed";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.container_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.container_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.container_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.container_id.is_empty() {
            os.write_string(1, &self.container_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TaskResumed {
        TaskResumed::new()
    }

    fn clear(&mut self) {
        self.container_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TaskResumed {
        static instance: TaskResumed = TaskResumed {
            container_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TaskResumed {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TaskResumed").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TaskResumed {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TaskResumed {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:containerd.events.TaskCheckpointed)
pub struct TaskCheckpointed {
    // message fields
    // @@protoc_insertion_point(field:containerd.events.TaskCheckpointed.container_id)
    pub container_id: ::std::string::String,
    // @@protoc_insertion_point(field:containerd.events.TaskCheckpointed.checkpoint)
    pub checkpoint: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:containerd.events.TaskCheckpointed.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TaskCheckpointed {
    fn default() -> &'a TaskCheckpointed {
        <TaskCheckpointed as ::protobuf::Message>::default_instance()
    }
}

impl TaskCheckpointed {
    pub fn new() -> TaskCheckpointed {
        ::std::default::Default::default()
    }

    // string container_id = 1;

    pub fn container_id(&self) -> &str {
        &self.container_id
    }

    pub fn clear_container_id(&mut self) {
        self.container_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_container_id(&mut self, v: ::std::string::String) {
        self.container_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_container_id(&mut self) -> &mut ::std::string::String {
        &mut self.container_id
    }

    // Take field
    pub fn take_container_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.container_id, ::std::string::String::new())
    }

    // string checkpoint = 2;

    pub fn checkpoint(&self) -> &str {
        &self.checkpoint
    }

    pub fn clear_checkpoint(&mut self) {
        self.checkpoint.clear();
    }

    // Param is passed by value, moved
    pub fn set_checkpoint(&mut self, v: ::std::string::String) {
        self.checkpoint = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_checkpoint(&mut self) -> &mut ::std::string::String {
        &mut self.checkpoint
    }

    // Take field
    pub fn take_checkpoint(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.checkpoint, ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "container_id",
            |m: &TaskCheckpointed| { &m.container_id },
            |m: &mut TaskCheckpointed| { &mut m.container_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "checkpoint",
            |m: &TaskCheckpointed| { &m.checkpoint },
            |m: &mut TaskCheckpointed| { &mut m.checkpoint },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TaskCheckpointed>(
            "TaskCheckpointed",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TaskCheckpointed {
    const NAME: &'static str = "TaskCheckpointed";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.container_id = is.read_string()?;
                },
                18 => {
                    self.checkpoint = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.container_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.container_id);
        }
        if !self.checkpoint.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.checkpoint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.container_id.is_empty() {
            os.write_string(1, &self.container_id)?;
        }
        if !self.checkpoint.is_empty() {
            os.write_string(2, &self.checkpoint)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TaskCheckpointed {
        TaskCheckpointed::new()
    }

    fn clear(&mut self) {
        self.container_id.clear();
        self.checkpoint.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TaskCheckpointed {
        static instance: TaskCheckpointed = TaskCheckpointed {
            container_id: ::std::string::String::new(),
            checkpoint: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TaskCheckpointed {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TaskCheckpointed").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TaskCheckpointed {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TaskCheckpointed {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n6github.com/containerd/containerd/api/events/task.proto\x12\x11contain\
    erd.events\x1a\x14gogoproto/gogo.proto\x1a\x1fgoogle/protobuf/timestamp.\
    proto\x1a6github.com/containerd/containerd/api/types/mount.proto\x1a@git\
    hub.com/containerd/containerd/protobuf/plugin/fieldpath.protoX\0X\x03\"\
    \xdd\x01\n\nTaskCreate\x12!\n\x0ccontainer_id\x18\x01\x20\x01(\tR\x0bcon\
    tainerId\x12\x16\n\x06bundle\x18\x02\x20\x01(\tR\x06bundle\x12/\n\x06roo\
    tfs\x18\x03\x20\x03(\x0b2\x17.containerd.types.MountR\x06rootfs\x121\n\
    \x02io\x18\x04\x20\x01(\x0b2\x19.containerd.events.TaskIOR\x02ioB\x06\
    \xe2\xde\x1f\x02IO\x12\x1e\n\ncheckpoint\x18\x05\x20\x01(\tR\ncheckpoint\
    \x12\x10\n\x03pid\x18\x06\x20\x01(\rR\x03pid\"@\n\tTaskStart\x12!\n\x0cc\
    ontainer_id\x18\x01\x20\x01(\tR\x0bcontainerId\x12\x10\n\x03pid\x18\x02\
    \x20\x01(\rR\x03pid\"\xb5\x01\n\nTaskDelete\x12!\n\x0ccontainer_id\x18\
    \x01\x20\x01(\tR\x0bcontainerId\x12\x10\n\x03pid\x18\x02\x20\x01(\rR\x03\
    pid\x12\x1f\n\x0bexit_status\x18\x03\x20\x01(\rR\nexitStatus\x12A\n\texi\
    ted_at\x18\x04\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x08exitedAtB\
    \x08\x90\xdf\x1f\x01\xc8\xde\x1f\0\x12\x0e\n\x02id\x18\x05\x20\x01(\tR\
    \x02id\"j\n\x06TaskIO\x12\x14\n\x05stdin\x18\x01\x20\x01(\tR\x05stdin\
    \x12\x16\n\x06stdout\x18\x02\x20\x01(\tR\x06stdout\x12\x16\n\x06stderr\
    \x18\x03\x20\x01(\tR\x06stderr\x12\x1a\n\x08terminal\x18\x04\x20\x01(\
    \x08R\x08terminal\"\xb3\x01\n\x08TaskExit\x12!\n\x0ccontainer_id\x18\x01\
    \x20\x01(\tR\x0bcontainerId\x12\x0e\n\x02id\x18\x02\x20\x01(\tR\x02id\
    \x12\x10\n\x03pid\x18\x03\x20\x01(\rR\x03pid\x12\x1f\n\x0bexit_status\
    \x18\x04\x20\x01(\rR\nexitStatus\x12A\n\texited_at\x18\x05\x20\x01(\x0b2\
    \x1a.google.protobuf.TimestampR\x08exitedAtB\x08\x90\xdf\x1f\x01\xc8\xde\
    \x1f\0\",\n\x07TaskOOM\x12!\n\x0ccontainer_id\x18\x01\x20\x01(\tR\x0bcon\
    tainerId\"K\n\rTaskExecAdded\x12!\n\x0ccontainer_id\x18\x01\x20\x01(\tR\
    \x0bcontainerId\x12\x17\n\x07exec_id\x18\x02\x20\x01(\tR\x06execId\"_\n\
    \x0fTaskExecStarted\x12!\n\x0ccontainer_id\x18\x01\x20\x01(\tR\x0bcontai\
    nerId\x12\x17\n\x07exec_id\x18\x02\x20\x01(\tR\x06execId\x12\x10\n\x03pi\
    d\x18\x03\x20\x01(\rR\x03pid\"/\n\nTaskPaused\x12!\n\x0ccontainer_id\x18\
    \x01\x20\x01(\tR\x0bcontainerId\"0\n\x0bTaskResumed\x12!\n\x0ccontainer_\
    id\x18\x01\x20\x01(\tR\x0bcontainerId\"U\n\x10TaskCheckpointed\x12!\n\
    \x0ccontainer_id\x18\x01\x20\x01(\tR\x0bcontainerId\x12\x1e\n\ncheckpoin\
    t\x18\x02\x20\x01(\tR\ncheckpointB8Z2github.com/containerd/containerd/ap\
    i/events;events\xa0\xf4\x1e\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            deps.push(super::mount::file_descriptor().clone());
            deps.push(super::fieldpath::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(11);
            messages.push(TaskCreate::generated_message_descriptor_data());
            messages.push(TaskStart::generated_message_descriptor_data());
            messages.push(TaskDelete::generated_message_descriptor_data());
            messages.push(TaskIO::generated_message_descriptor_data());
            messages.push(TaskExit::generated_message_descriptor_data());
            messages.push(TaskOOM::generated_message_descriptor_data());
            messages.push(TaskExecAdded::generated_message_descriptor_data());
            messages.push(TaskExecStarted::generated_message_descriptor_data());
            messages.push(TaskPaused::generated_message_descriptor_data());
            messages.push(TaskResumed::generated_message_descriptor_data());
            messages.push(TaskCheckpointed::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
