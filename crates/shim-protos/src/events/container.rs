// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `github.com/containerd/containerd/api/events/container.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:containerd.events.ContainerCreate)
pub struct ContainerCreate {
    // message fields
    // @@protoc_insertion_point(field:containerd.events.ContainerCreate.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:containerd.events.ContainerCreate.image)
    pub image: ::std::string::String,
    // @@protoc_insertion_point(field:containerd.events.ContainerCreate.runtime)
    pub runtime: ::protobuf::MessageField<container_create::Runtime>,
    // special fields
    // @@protoc_insertion_point(special_field:containerd.events.ContainerCreate.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ContainerCreate {
    fn default() -> &'a ContainerCreate {
        <ContainerCreate as ::protobuf::Message>::default_instance()
    }
}

impl ContainerCreate {
    pub fn new() -> ContainerCreate {
        ::std::default::Default::default()
    }

    // string id = 1;

    pub fn id(&self) -> &str {
        &self.id
    }

    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string image = 2;

    pub fn image(&self) -> &str {
        &self.image
    }

    pub fn clear_image(&mut self) {
        self.image.clear();
    }

    // Param is passed by value, moved
    pub fn set_image(&mut self, v: ::std::string::String) {
        self.image = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_image(&mut self) -> &mut ::std::string::String {
        &mut self.image
    }

    // Take field
    pub fn take_image(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.image, ::std::string::String::new())
    }

    // .containerd.events.ContainerCreate.Runtime runtime = 3;

    pub fn runtime(&self) -> &container_create::Runtime {
        self.runtime.as_ref().unwrap_or_else(|| <container_create::Runtime as ::protobuf::Message>::default_instance())
    }

    pub fn clear_runtime(&mut self) {
        self.runtime.clear();
    }

    pub fn has_runtime(&self) -> bool {
        self.runtime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_runtime(&mut self, v: container_create::Runtime) {
        self.runtime = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_runtime(&mut self) -> &mut container_create::Runtime {
        self.runtime.mut_or_insert_default()
    }

    // Take field
    pub fn take_runtime(&mut self) -> container_create::Runtime {
        self.runtime.take().unwrap_or_else(|| container_create::Runtime::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &ContainerCreate| { &m.id },
            |m: &mut ContainerCreate| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "image",
            |m: &ContainerCreate| { &m.image },
            |m: &mut ContainerCreate| { &mut m.image },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, container_create::Runtime>(
            "runtime",
            |m: &ContainerCreate| { &m.runtime },
            |m: &mut ContainerCreate| { &mut m.runtime },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ContainerCreate>(
            "ContainerCreate",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ContainerCreate {
    const NAME: &'static str = "ContainerCreate";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.image = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.runtime)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.image.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.image);
        }
        if let Some(v) = self.runtime.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.image.is_empty() {
            os.write_string(2, &self.image)?;
        }
        if let Some(v) = self.runtime.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ContainerCreate {
        ContainerCreate::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.image.clear();
        self.runtime.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ContainerCreate {
        static instance: ContainerCreate = ContainerCreate {
            id: ::std::string::String::new(),
            image: ::std::string::String::new(),
            runtime: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ContainerCreate {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ContainerCreate").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ContainerCreate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContainerCreate {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ContainerCreate`
pub mod container_create {
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:containerd.events.ContainerCreate.Runtime)
    pub struct Runtime {
        // message fields
        // @@protoc_insertion_point(field:containerd.events.ContainerCreate.Runtime.name)
        pub name: ::std::string::String,
        // @@protoc_insertion_point(field:containerd.events.ContainerCreate.Runtime.options)
        pub options: ::protobuf::MessageField<::protobuf::well_known_types::any::Any>,
        // special fields
        // @@protoc_insertion_point(special_field:containerd.events.ContainerCreate.Runtime.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Runtime {
        fn default() -> &'a Runtime {
            <Runtime as ::protobuf::Message>::default_instance()
        }
    }

    impl Runtime {
        pub fn new() -> Runtime {
            ::std::default::Default::default()
        }

        // string name = 1;

        pub fn name(&self) -> &str {
            &self.name
        }

        pub fn clear_name(&mut self) {
            self.name.clear();
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = v;
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            &mut self.name
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            ::std::mem::replace(&mut self.name, ::std::string::String::new())
        }

        // .google.protobuf.Any options = 2;

        pub fn options(&self) -> &::protobuf::well_known_types::any::Any {
            self.options.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::any::Any as ::protobuf::Message>::default_instance())
        }

        pub fn clear_options(&mut self) {
            self.options.clear();
        }

        pub fn has_options(&self) -> bool {
            self.options.is_some()
        }

        // Param is passed by value, moved
        pub fn set_options(&mut self, v: ::protobuf::well_known_types::any::Any) {
            self.options = ::protobuf::MessageField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_options(&mut self) -> &mut ::protobuf::well_known_types::any::Any {
            self.options.mut_or_insert_default()
        }

        // Take field
        pub fn take_options(&mut self) -> ::protobuf::well_known_types::any::Any {
            self.options.take().unwrap_or_else(|| ::protobuf::well_known_types::any::Any::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "name",
                |m: &Runtime| { &m.name },
                |m: &mut Runtime| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::any::Any>(
                "options",
                |m: &Runtime| { &m.options },
                |m: &mut Runtime| { &mut m.options },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Runtime>(
                "ContainerCreate.Runtime",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Runtime {
        const NAME: &'static str = "Runtime";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.name = is.read_string()?;
                    },
                    18 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.options)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.name.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.name);
            }
            if let Some(v) = self.options.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.name.is_empty() {
                os.write_string(1, &self.name)?;
            }
            if let Some(v) = self.options.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Runtime {
            Runtime::new()
        }

        fn clear(&mut self) {
            self.name.clear();
            self.options.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Runtime {
            static instance: Runtime = Runtime {
                name: ::std::string::String::new(),
                options: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Runtime {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("ContainerCreate.Runtime").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Runtime {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Runtime {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:containerd.events.ContainerUpdate)
pub struct ContainerUpdate {
    // message fields
    // @@protoc_insertion_point(field:containerd.events.ContainerUpdate.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:containerd.events.ContainerUpdate.image)
    pub image: ::std::string::String,
    // @@protoc_insertion_point(field:containerd.events.ContainerUpdate.labels)
    pub labels: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // @@protoc_insertion_point(field:containerd.events.ContainerUpdate.snapshot_key)
    pub snapshot_key: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:containerd.events.ContainerUpdate.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ContainerUpdate {
    fn default() -> &'a ContainerUpdate {
        <ContainerUpdate as ::protobuf::Message>::default_instance()
    }
}

impl ContainerUpdate {
    pub fn new() -> ContainerUpdate {
        ::std::default::Default::default()
    }

    // string id = 1;

    pub fn id(&self) -> &str {
        &self.id
    }

    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string image = 2;

    pub fn image(&self) -> &str {
        &self.image
    }

    pub fn clear_image(&mut self) {
        self.image.clear();
    }

    // Param is passed by value, moved
    pub fn set_image(&mut self, v: ::std::string::String) {
        self.image = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_image(&mut self) -> &mut ::std::string::String {
        &mut self.image
    }

    // Take field
    pub fn take_image(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.image, ::std::string::String::new())
    }

    // repeated .containerd.events.ContainerUpdate.LabelsEntry labels = 3;

    pub fn labels(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.labels
    }

    pub fn clear_labels(&mut self) {
        self.labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_labels(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_labels(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.labels
    }

    // Take field
    pub fn take_labels(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.labels, ::std::collections::HashMap::new())
    }

    // string snapshot_key = 4;

    pub fn snapshot_key(&self) -> &str {
        &self.snapshot_key
    }

    pub fn clear_snapshot_key(&mut self) {
        self.snapshot_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_snapshot_key(&mut self, v: ::std::string::String) {
        self.snapshot_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_snapshot_key(&mut self) -> &mut ::std::string::String {
        &mut self.snapshot_key
    }

    // Take field
    pub fn take_snapshot_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.snapshot_key, ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &ContainerUpdate| { &m.id },
            |m: &mut ContainerUpdate| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "image",
            |m: &ContainerUpdate| { &m.image },
            |m: &mut ContainerUpdate| { &mut m.image },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "labels",
            |m: &ContainerUpdate| { &m.labels },
            |m: &mut ContainerUpdate| { &mut m.labels },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "snapshot_key",
            |m: &ContainerUpdate| { &m.snapshot_key },
            |m: &mut ContainerUpdate| { &mut m.snapshot_key },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ContainerUpdate>(
            "ContainerUpdate",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ContainerUpdate {
    const NAME: &'static str = "ContainerUpdate";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.image = is.read_string()?;
                },
                26 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.labels.insert(key, value);
                },
                34 => {
                    self.snapshot_key = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.image.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.image);
        }
        for (k, v) in &self.labels {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if !self.snapshot_key.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.snapshot_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.image.is_empty() {
            os.write_string(2, &self.image)?;
        }
        for (k, v) in &self.labels {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(26)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        if !self.snapshot_key.is_empty() {
            os.write_string(4, &self.snapshot_key)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ContainerUpdate {
        ContainerUpdate::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.image.clear();
        self.labels.clear();
        self.snapshot_key.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ContainerUpdate {
        static instance: ::protobuf::rt::Lazy<ContainerUpdate> = ::protobuf::rt::Lazy::new();
        instance.get(ContainerUpdate::new)
    }
}

impl ::protobuf::MessageFull for ContainerUpdate {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ContainerUpdate").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ContainerUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContainerUpdate {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:containerd.events.ContainerDelete)
pub struct ContainerDelete {
    // message fields
    // @@protoc_insertion_point(field:containerd.events.ContainerDelete.id)
    pub id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:containerd.events.ContainerDelete.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ContainerDelete {
    fn default() -> &'a ContainerDelete {
        <ContainerDelete as ::protobuf::Message>::default_instance()
    }
}

impl ContainerDelete {
    pub fn new() -> ContainerDelete {
        ::std::default::Default::default()
    }

    // string id = 1;

    pub fn id(&self) -> &str {
        &self.id
    }

    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &ContainerDelete| { &m.id },
            |m: &mut ContainerDelete| { &mut m.id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ContainerDelete>(
            "ContainerDelete",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ContainerDelete {
    const NAME: &'static str = "ContainerDelete";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ContainerDelete {
        ContainerDelete::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ContainerDelete {
        static instance: ContainerDelete = ContainerDelete {
            id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ContainerDelete {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ContainerDelete").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ContainerDelete {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContainerDelete {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n;github.com/containerd/containerd/api/events/container.proto\x12\x11co\
    ntainerd.events\x1a\x19google/protobuf/any.proto\x1a\x14gogoproto/gogo.p\
    roto\x1a@github.com/containerd/containerd/protobuf/plugin/fieldpath.prot\
    oX\x01X\x02\"\xcc\x01\n\x0fContainerCreate\x12\x0e\n\x02id\x18\x01\x20\
    \x01(\tR\x02id\x12\x14\n\x05image\x18\x02\x20\x01(\tR\x05image\x12D\n\
    \x07runtime\x18\x03\x20\x01(\x0b2*.containerd.events.ContainerCreate.Run\
    timeR\x07runtime\x1aM\n\x07Runtime\x12\x12\n\x04name\x18\x01\x20\x01(\tR\
    \x04name\x12.\n\x07options\x18\x02\x20\x01(\x0b2\x14.google.protobuf.Any\
    R\x07options\"\xdd\x01\n\x0fContainerUpdate\x12\x0e\n\x02id\x18\x01\x20\
    \x01(\tR\x02id\x12\x14\n\x05image\x18\x02\x20\x01(\tR\x05image\x12F\n\
    \x06labels\x18\x03\x20\x03(\x0b2..containerd.events.ContainerUpdate.Labe\
    lsEntryR\x06labels\x12!\n\x0csnapshot_key\x18\x04\x20\x01(\tR\x0bsnapsho\
    tKey\x1a9\n\x0bLabelsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\
    \x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\"!\n\x0fConta\
    inerDelete\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02idB8Z2github.com/conta\
    inerd/containerd/api/events;events\xa0\xf4\x1e\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(::protobuf::well_known_types::any::file_descriptor().clone());
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::fieldpath::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(ContainerCreate::generated_message_descriptor_data());
            messages.push(ContainerUpdate::generated_message_descriptor_data());
            messages.push(ContainerDelete::generated_message_descriptor_data());
            messages.push(container_create::Runtime::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
