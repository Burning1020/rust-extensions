// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `github.com/containerd/containerd/api/types/task/task.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:containerd.v1.types.Process)
pub struct Process {
    // message fields
    // @@protoc_insertion_point(field:containerd.v1.types.Process.container_id)
    pub container_id: ::std::string::String,
    // @@protoc_insertion_point(field:containerd.v1.types.Process.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:containerd.v1.types.Process.pid)
    pub pid: u32,
    // @@protoc_insertion_point(field:containerd.v1.types.Process.status)
    pub status: ::protobuf::EnumOrUnknown<Status>,
    // @@protoc_insertion_point(field:containerd.v1.types.Process.stdin)
    pub stdin: ::std::string::String,
    // @@protoc_insertion_point(field:containerd.v1.types.Process.stdout)
    pub stdout: ::std::string::String,
    // @@protoc_insertion_point(field:containerd.v1.types.Process.stderr)
    pub stderr: ::std::string::String,
    // @@protoc_insertion_point(field:containerd.v1.types.Process.terminal)
    pub terminal: bool,
    // @@protoc_insertion_point(field:containerd.v1.types.Process.exit_status)
    pub exit_status: u32,
    // @@protoc_insertion_point(field:containerd.v1.types.Process.exited_at)
    pub exited_at: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:containerd.v1.types.Process.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Process {
    fn default() -> &'a Process {
        <Process as ::protobuf::Message>::default_instance()
    }
}

impl Process {
    pub fn new() -> Process {
        ::std::default::Default::default()
    }

    // string container_id = 1;

    pub fn container_id(&self) -> &str {
        &self.container_id
    }

    pub fn clear_container_id(&mut self) {
        self.container_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_container_id(&mut self, v: ::std::string::String) {
        self.container_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_container_id(&mut self) -> &mut ::std::string::String {
        &mut self.container_id
    }

    // Take field
    pub fn take_container_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.container_id, ::std::string::String::new())
    }

    // string id = 2;

    pub fn id(&self) -> &str {
        &self.id
    }

    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // uint32 pid = 3;

    pub fn pid(&self) -> u32 {
        self.pid
    }

    pub fn clear_pid(&mut self) {
        self.pid = 0;
    }

    // Param is passed by value, moved
    pub fn set_pid(&mut self, v: u32) {
        self.pid = v;
    }

    // .containerd.v1.types.Status status = 4;

    pub fn status(&self) -> Status {
        self.status.enum_value_or_default()
    }

    pub fn clear_status(&mut self) {
        self.status = ::protobuf::EnumOrUnknown::new(Status::UNKNOWN);
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: Status) {
        self.status = ::protobuf::EnumOrUnknown::new(v);
    }

    // string stdin = 5;

    pub fn stdin(&self) -> &str {
        &self.stdin
    }

    pub fn clear_stdin(&mut self) {
        self.stdin.clear();
    }

    // Param is passed by value, moved
    pub fn set_stdin(&mut self, v: ::std::string::String) {
        self.stdin = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stdin(&mut self) -> &mut ::std::string::String {
        &mut self.stdin
    }

    // Take field
    pub fn take_stdin(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.stdin, ::std::string::String::new())
    }

    // string stdout = 6;

    pub fn stdout(&self) -> &str {
        &self.stdout
    }

    pub fn clear_stdout(&mut self) {
        self.stdout.clear();
    }

    // Param is passed by value, moved
    pub fn set_stdout(&mut self, v: ::std::string::String) {
        self.stdout = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stdout(&mut self) -> &mut ::std::string::String {
        &mut self.stdout
    }

    // Take field
    pub fn take_stdout(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.stdout, ::std::string::String::new())
    }

    // string stderr = 7;

    pub fn stderr(&self) -> &str {
        &self.stderr
    }

    pub fn clear_stderr(&mut self) {
        self.stderr.clear();
    }

    // Param is passed by value, moved
    pub fn set_stderr(&mut self, v: ::std::string::String) {
        self.stderr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stderr(&mut self) -> &mut ::std::string::String {
        &mut self.stderr
    }

    // Take field
    pub fn take_stderr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.stderr, ::std::string::String::new())
    }

    // bool terminal = 8;

    pub fn terminal(&self) -> bool {
        self.terminal
    }

    pub fn clear_terminal(&mut self) {
        self.terminal = false;
    }

    // Param is passed by value, moved
    pub fn set_terminal(&mut self, v: bool) {
        self.terminal = v;
    }

    // uint32 exit_status = 9;

    pub fn exit_status(&self) -> u32 {
        self.exit_status
    }

    pub fn clear_exit_status(&mut self) {
        self.exit_status = 0;
    }

    // Param is passed by value, moved
    pub fn set_exit_status(&mut self, v: u32) {
        self.exit_status = v;
    }

    // .google.protobuf.Timestamp exited_at = 10;

    pub fn exited_at(&self) -> &::protobuf::well_known_types::timestamp::Timestamp {
        self.exited_at.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::timestamp::Timestamp as ::protobuf::Message>::default_instance())
    }

    pub fn clear_exited_at(&mut self) {
        self.exited_at.clear();
    }

    pub fn has_exited_at(&self) -> bool {
        self.exited_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_exited_at(&mut self, v: ::protobuf::well_known_types::timestamp::Timestamp) {
        self.exited_at = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_exited_at(&mut self) -> &mut ::protobuf::well_known_types::timestamp::Timestamp {
        self.exited_at.mut_or_insert_default()
    }

    // Take field
    pub fn take_exited_at(&mut self) -> ::protobuf::well_known_types::timestamp::Timestamp {
        self.exited_at.take().unwrap_or_else(|| ::protobuf::well_known_types::timestamp::Timestamp::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "container_id",
            |m: &Process| { &m.container_id },
            |m: &mut Process| { &mut m.container_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Process| { &m.id },
            |m: &mut Process| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pid",
            |m: &Process| { &m.pid },
            |m: &mut Process| { &mut m.pid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &Process| { &m.status },
            |m: &mut Process| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "stdin",
            |m: &Process| { &m.stdin },
            |m: &mut Process| { &mut m.stdin },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "stdout",
            |m: &Process| { &m.stdout },
            |m: &mut Process| { &mut m.stdout },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "stderr",
            |m: &Process| { &m.stderr },
            |m: &mut Process| { &mut m.stderr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "terminal",
            |m: &Process| { &m.terminal },
            |m: &mut Process| { &mut m.terminal },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "exit_status",
            |m: &Process| { &m.exit_status },
            |m: &mut Process| { &mut m.exit_status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "exited_at",
            |m: &Process| { &m.exited_at },
            |m: &mut Process| { &mut m.exited_at },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Process>(
            "Process",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Process {
    const NAME: &'static str = "Process";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.container_id = is.read_string()?;
                },
                18 => {
                    self.id = is.read_string()?;
                },
                24 => {
                    self.pid = is.read_uint32()?;
                },
                32 => {
                    self.status = is.read_enum_or_unknown()?;
                },
                42 => {
                    self.stdin = is.read_string()?;
                },
                50 => {
                    self.stdout = is.read_string()?;
                },
                58 => {
                    self.stderr = is.read_string()?;
                },
                64 => {
                    self.terminal = is.read_bool()?;
                },
                72 => {
                    self.exit_status = is.read_uint32()?;
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.exited_at)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.container_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.container_id);
        }
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.id);
        }
        if self.pid != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.pid);
        }
        if self.status != ::protobuf::EnumOrUnknown::new(Status::UNKNOWN) {
            my_size += ::protobuf::rt::int32_size(4, self.status.value());
        }
        if !self.stdin.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.stdin);
        }
        if !self.stdout.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.stdout);
        }
        if !self.stderr.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.stderr);
        }
        if self.terminal != false {
            my_size += 1 + 1;
        }
        if self.exit_status != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.exit_status);
        }
        if let Some(v) = self.exited_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.container_id.is_empty() {
            os.write_string(1, &self.container_id)?;
        }
        if !self.id.is_empty() {
            os.write_string(2, &self.id)?;
        }
        if self.pid != 0 {
            os.write_uint32(3, self.pid)?;
        }
        if self.status != ::protobuf::EnumOrUnknown::new(Status::UNKNOWN) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.status))?;
        }
        if !self.stdin.is_empty() {
            os.write_string(5, &self.stdin)?;
        }
        if !self.stdout.is_empty() {
            os.write_string(6, &self.stdout)?;
        }
        if !self.stderr.is_empty() {
            os.write_string(7, &self.stderr)?;
        }
        if self.terminal != false {
            os.write_bool(8, self.terminal)?;
        }
        if self.exit_status != 0 {
            os.write_uint32(9, self.exit_status)?;
        }
        if let Some(v) = self.exited_at.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Process {
        Process::new()
    }

    fn clear(&mut self) {
        self.container_id.clear();
        self.id.clear();
        self.pid = 0;
        self.status = ::protobuf::EnumOrUnknown::new(Status::UNKNOWN);
        self.stdin.clear();
        self.stdout.clear();
        self.stderr.clear();
        self.terminal = false;
        self.exit_status = 0;
        self.exited_at.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Process {
        static instance: Process = Process {
            container_id: ::std::string::String::new(),
            id: ::std::string::String::new(),
            pid: 0,
            status: ::protobuf::EnumOrUnknown::from_i32(0),
            stdin: ::std::string::String::new(),
            stdout: ::std::string::String::new(),
            stderr: ::std::string::String::new(),
            terminal: false,
            exit_status: 0,
            exited_at: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Process {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Process").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Process {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Process {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:containerd.v1.types.ProcessInfo)
pub struct ProcessInfo {
    // message fields
    // @@protoc_insertion_point(field:containerd.v1.types.ProcessInfo.pid)
    pub pid: u32,
    // @@protoc_insertion_point(field:containerd.v1.types.ProcessInfo.info)
    pub info: ::protobuf::MessageField<::protobuf::well_known_types::any::Any>,
    // special fields
    // @@protoc_insertion_point(special_field:containerd.v1.types.ProcessInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProcessInfo {
    fn default() -> &'a ProcessInfo {
        <ProcessInfo as ::protobuf::Message>::default_instance()
    }
}

impl ProcessInfo {
    pub fn new() -> ProcessInfo {
        ::std::default::Default::default()
    }

    // uint32 pid = 1;

    pub fn pid(&self) -> u32 {
        self.pid
    }

    pub fn clear_pid(&mut self) {
        self.pid = 0;
    }

    // Param is passed by value, moved
    pub fn set_pid(&mut self, v: u32) {
        self.pid = v;
    }

    // .google.protobuf.Any info = 2;

    pub fn info(&self) -> &::protobuf::well_known_types::any::Any {
        self.info.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::any::Any as ::protobuf::Message>::default_instance())
    }

    pub fn clear_info(&mut self) {
        self.info.clear();
    }

    pub fn has_info(&self) -> bool {
        self.info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_info(&mut self, v: ::protobuf::well_known_types::any::Any) {
        self.info = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_info(&mut self) -> &mut ::protobuf::well_known_types::any::Any {
        self.info.mut_or_insert_default()
    }

    // Take field
    pub fn take_info(&mut self) -> ::protobuf::well_known_types::any::Any {
        self.info.take().unwrap_or_else(|| ::protobuf::well_known_types::any::Any::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pid",
            |m: &ProcessInfo| { &m.pid },
            |m: &mut ProcessInfo| { &mut m.pid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::any::Any>(
            "info",
            |m: &ProcessInfo| { &m.info },
            |m: &mut ProcessInfo| { &mut m.info },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ProcessInfo>(
            "ProcessInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ProcessInfo {
    const NAME: &'static str = "ProcessInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.pid = is.read_uint32()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.info)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.pid != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.pid);
        }
        if let Some(v) = self.info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.pid != 0 {
            os.write_uint32(1, self.pid)?;
        }
        if let Some(v) = self.info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProcessInfo {
        ProcessInfo::new()
    }

    fn clear(&mut self) {
        self.pid = 0;
        self.info.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProcessInfo {
        static instance: ProcessInfo = ProcessInfo {
            pid: 0,
            info: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ProcessInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProcessInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProcessInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProcessInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:containerd.v1.types.Status)
pub enum Status {
    // @@protoc_insertion_point(enum_value:containerd.v1.types.Status.UNKNOWN)
    UNKNOWN = 0,
    // @@protoc_insertion_point(enum_value:containerd.v1.types.Status.CREATED)
    CREATED = 1,
    // @@protoc_insertion_point(enum_value:containerd.v1.types.Status.RUNNING)
    RUNNING = 2,
    // @@protoc_insertion_point(enum_value:containerd.v1.types.Status.STOPPED)
    STOPPED = 3,
    // @@protoc_insertion_point(enum_value:containerd.v1.types.Status.PAUSED)
    PAUSED = 4,
    // @@protoc_insertion_point(enum_value:containerd.v1.types.Status.PAUSING)
    PAUSING = 5,
}

impl ::protobuf::Enum for Status {
    const NAME: &'static str = "Status";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Status> {
        match value {
            0 => ::std::option::Option::Some(Status::UNKNOWN),
            1 => ::std::option::Option::Some(Status::CREATED),
            2 => ::std::option::Option::Some(Status::RUNNING),
            3 => ::std::option::Option::Some(Status::STOPPED),
            4 => ::std::option::Option::Some(Status::PAUSED),
            5 => ::std::option::Option::Some(Status::PAUSING),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [Status] = &[
        Status::UNKNOWN,
        Status::CREATED,
        Status::RUNNING,
        Status::STOPPED,
        Status::PAUSED,
        Status::PAUSING,
    ];
}

impl ::protobuf::EnumFull for Status {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("Status").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for Status {
    fn default() -> Self {
        Status::UNKNOWN
    }
}

impl Status {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Status>("Status")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n:github.com/containerd/containerd/api/types/task/task.proto\x12\x13con\
    tainerd.v1.types\x1a\x14gogoproto/gogo.proto\x1a\x1fgoogle/protobuf/time\
    stamp.proto\x1a\x19google/protobuf/any.protoX\0\"\xc9\x02\n\x07Process\
    \x12!\n\x0ccontainer_id\x18\x01\x20\x01(\tR\x0bcontainerId\x12\x0e\n\x02\
    id\x18\x02\x20\x01(\tR\x02id\x12\x10\n\x03pid\x18\x03\x20\x01(\rR\x03pid\
    \x123\n\x06status\x18\x04\x20\x01(\x0e2\x1b.containerd.v1.types.StatusR\
    \x06status\x12\x14\n\x05stdin\x18\x05\x20\x01(\tR\x05stdin\x12\x16\n\x06\
    stdout\x18\x06\x20\x01(\tR\x06stdout\x12\x16\n\x06stderr\x18\x07\x20\x01\
    (\tR\x06stderr\x12\x1a\n\x08terminal\x18\x08\x20\x01(\x08R\x08terminal\
    \x12\x1f\n\x0bexit_status\x18\t\x20\x01(\rR\nexitStatus\x12A\n\texited_a\
    t\x18\n\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x08exitedAtB\x08\
    \x90\xdf\x1f\x01\xc8\xde\x1f\0\"I\n\x0bProcessInfo\x12\x10\n\x03pid\x18\
    \x01\x20\x01(\rR\x03pid\x12(\n\x04info\x18\x02\x20\x01(\x0b2\x14.google.\
    protobuf.AnyR\x04info*\xd6\x01\n\x06Status\x12\x1e\n\x07UNKNOWN\x10\0\
    \x1a\x11\x8a\x9d\x20\rStatusUnknown\x12\x1e\n\x07CREATED\x10\x01\x1a\x11\
    \x8a\x9d\x20\rStatusCreated\x12\x1e\n\x07RUNNING\x10\x02\x1a\x11\x8a\x9d\
    \x20\rStatusRunning\x12\x1e\n\x07STOPPED\x10\x03\x1a\x11\x8a\x9d\x20\rSt\
    atusStopped\x12\x1c\n\x06PAUSED\x10\x04\x1a\x10\x8a\x9d\x20\x0cStatusPau\
    sed\x12\x1e\n\x07PAUSING\x10\x05\x1a\x11\x8a\x9d\x20\rStatusPausing\x1a\
    \x0e\xba\xa4\x1e\x06Status\x88\xa3\x1e\0b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::any::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(Process::generated_message_descriptor_data());
            messages.push(ProcessInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(Status::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
