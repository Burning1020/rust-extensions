// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `github.com/containerd/containerd/runtime/v2/runc/options/oci.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:containerd.runc.v1.Options)
pub struct Options {
    // message fields
    // @@protoc_insertion_point(field:containerd.runc.v1.Options.no_pivot_root)
    pub no_pivot_root: bool,
    // @@protoc_insertion_point(field:containerd.runc.v1.Options.no_new_keyring)
    pub no_new_keyring: bool,
    // @@protoc_insertion_point(field:containerd.runc.v1.Options.shim_cgroup)
    pub shim_cgroup: ::std::string::String,
    // @@protoc_insertion_point(field:containerd.runc.v1.Options.io_uid)
    pub io_uid: u32,
    // @@protoc_insertion_point(field:containerd.runc.v1.Options.io_gid)
    pub io_gid: u32,
    // @@protoc_insertion_point(field:containerd.runc.v1.Options.binary_name)
    pub binary_name: ::std::string::String,
    // @@protoc_insertion_point(field:containerd.runc.v1.Options.root)
    pub root: ::std::string::String,
    // @@protoc_insertion_point(field:containerd.runc.v1.Options.criu_path)
    pub criu_path: ::std::string::String,
    // @@protoc_insertion_point(field:containerd.runc.v1.Options.systemd_cgroup)
    pub systemd_cgroup: bool,
    // @@protoc_insertion_point(field:containerd.runc.v1.Options.criu_image_path)
    pub criu_image_path: ::std::string::String,
    // @@protoc_insertion_point(field:containerd.runc.v1.Options.criu_work_path)
    pub criu_work_path: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:containerd.runc.v1.Options.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Options {
    fn default() -> &'a Options {
        <Options as ::protobuf::Message>::default_instance()
    }
}

impl Options {
    pub fn new() -> Options {
        ::std::default::Default::default()
    }

    // bool no_pivot_root = 1;

    pub fn no_pivot_root(&self) -> bool {
        self.no_pivot_root
    }

    pub fn clear_no_pivot_root(&mut self) {
        self.no_pivot_root = false;
    }

    // Param is passed by value, moved
    pub fn set_no_pivot_root(&mut self, v: bool) {
        self.no_pivot_root = v;
    }

    // bool no_new_keyring = 2;

    pub fn no_new_keyring(&self) -> bool {
        self.no_new_keyring
    }

    pub fn clear_no_new_keyring(&mut self) {
        self.no_new_keyring = false;
    }

    // Param is passed by value, moved
    pub fn set_no_new_keyring(&mut self, v: bool) {
        self.no_new_keyring = v;
    }

    // string shim_cgroup = 3;

    pub fn shim_cgroup(&self) -> &str {
        &self.shim_cgroup
    }

    pub fn clear_shim_cgroup(&mut self) {
        self.shim_cgroup.clear();
    }

    // Param is passed by value, moved
    pub fn set_shim_cgroup(&mut self, v: ::std::string::String) {
        self.shim_cgroup = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_shim_cgroup(&mut self) -> &mut ::std::string::String {
        &mut self.shim_cgroup
    }

    // Take field
    pub fn take_shim_cgroup(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.shim_cgroup, ::std::string::String::new())
    }

    // uint32 io_uid = 4;

    pub fn io_uid(&self) -> u32 {
        self.io_uid
    }

    pub fn clear_io_uid(&mut self) {
        self.io_uid = 0;
    }

    // Param is passed by value, moved
    pub fn set_io_uid(&mut self, v: u32) {
        self.io_uid = v;
    }

    // uint32 io_gid = 5;

    pub fn io_gid(&self) -> u32 {
        self.io_gid
    }

    pub fn clear_io_gid(&mut self) {
        self.io_gid = 0;
    }

    // Param is passed by value, moved
    pub fn set_io_gid(&mut self, v: u32) {
        self.io_gid = v;
    }

    // string binary_name = 6;

    pub fn binary_name(&self) -> &str {
        &self.binary_name
    }

    pub fn clear_binary_name(&mut self) {
        self.binary_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_binary_name(&mut self, v: ::std::string::String) {
        self.binary_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_binary_name(&mut self) -> &mut ::std::string::String {
        &mut self.binary_name
    }

    // Take field
    pub fn take_binary_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.binary_name, ::std::string::String::new())
    }

    // string root = 7;

    pub fn root(&self) -> &str {
        &self.root
    }

    pub fn clear_root(&mut self) {
        self.root.clear();
    }

    // Param is passed by value, moved
    pub fn set_root(&mut self, v: ::std::string::String) {
        self.root = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_root(&mut self) -> &mut ::std::string::String {
        &mut self.root
    }

    // Take field
    pub fn take_root(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.root, ::std::string::String::new())
    }

    // string criu_path = 8;

    pub fn criu_path(&self) -> &str {
        &self.criu_path
    }

    pub fn clear_criu_path(&mut self) {
        self.criu_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_criu_path(&mut self, v: ::std::string::String) {
        self.criu_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_criu_path(&mut self) -> &mut ::std::string::String {
        &mut self.criu_path
    }

    // Take field
    pub fn take_criu_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.criu_path, ::std::string::String::new())
    }

    // bool systemd_cgroup = 9;

    pub fn systemd_cgroup(&self) -> bool {
        self.systemd_cgroup
    }

    pub fn clear_systemd_cgroup(&mut self) {
        self.systemd_cgroup = false;
    }

    // Param is passed by value, moved
    pub fn set_systemd_cgroup(&mut self, v: bool) {
        self.systemd_cgroup = v;
    }

    // string criu_image_path = 10;

    pub fn criu_image_path(&self) -> &str {
        &self.criu_image_path
    }

    pub fn clear_criu_image_path(&mut self) {
        self.criu_image_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_criu_image_path(&mut self, v: ::std::string::String) {
        self.criu_image_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_criu_image_path(&mut self) -> &mut ::std::string::String {
        &mut self.criu_image_path
    }

    // Take field
    pub fn take_criu_image_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.criu_image_path, ::std::string::String::new())
    }

    // string criu_work_path = 11;

    pub fn criu_work_path(&self) -> &str {
        &self.criu_work_path
    }

    pub fn clear_criu_work_path(&mut self) {
        self.criu_work_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_criu_work_path(&mut self, v: ::std::string::String) {
        self.criu_work_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_criu_work_path(&mut self) -> &mut ::std::string::String {
        &mut self.criu_work_path
    }

    // Take field
    pub fn take_criu_work_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.criu_work_path, ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "no_pivot_root",
            |m: &Options| { &m.no_pivot_root },
            |m: &mut Options| { &mut m.no_pivot_root },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "no_new_keyring",
            |m: &Options| { &m.no_new_keyring },
            |m: &mut Options| { &mut m.no_new_keyring },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "shim_cgroup",
            |m: &Options| { &m.shim_cgroup },
            |m: &mut Options| { &mut m.shim_cgroup },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "io_uid",
            |m: &Options| { &m.io_uid },
            |m: &mut Options| { &mut m.io_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "io_gid",
            |m: &Options| { &m.io_gid },
            |m: &mut Options| { &mut m.io_gid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "binary_name",
            |m: &Options| { &m.binary_name },
            |m: &mut Options| { &mut m.binary_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "root",
            |m: &Options| { &m.root },
            |m: &mut Options| { &mut m.root },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "criu_path",
            |m: &Options| { &m.criu_path },
            |m: &mut Options| { &mut m.criu_path },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "systemd_cgroup",
            |m: &Options| { &m.systemd_cgroup },
            |m: &mut Options| { &mut m.systemd_cgroup },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "criu_image_path",
            |m: &Options| { &m.criu_image_path },
            |m: &mut Options| { &mut m.criu_image_path },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "criu_work_path",
            |m: &Options| { &m.criu_work_path },
            |m: &mut Options| { &mut m.criu_work_path },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Options>(
            "Options",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Options {
    const NAME: &'static str = "Options";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.no_pivot_root = is.read_bool()?;
                },
                16 => {
                    self.no_new_keyring = is.read_bool()?;
                },
                26 => {
                    self.shim_cgroup = is.read_string()?;
                },
                32 => {
                    self.io_uid = is.read_uint32()?;
                },
                40 => {
                    self.io_gid = is.read_uint32()?;
                },
                50 => {
                    self.binary_name = is.read_string()?;
                },
                58 => {
                    self.root = is.read_string()?;
                },
                66 => {
                    self.criu_path = is.read_string()?;
                },
                72 => {
                    self.systemd_cgroup = is.read_bool()?;
                },
                82 => {
                    self.criu_image_path = is.read_string()?;
                },
                90 => {
                    self.criu_work_path = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.no_pivot_root != false {
            my_size += 1 + 1;
        }
        if self.no_new_keyring != false {
            my_size += 1 + 1;
        }
        if !self.shim_cgroup.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.shim_cgroup);
        }
        if self.io_uid != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.io_uid);
        }
        if self.io_gid != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.io_gid);
        }
        if !self.binary_name.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.binary_name);
        }
        if !self.root.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.root);
        }
        if !self.criu_path.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.criu_path);
        }
        if self.systemd_cgroup != false {
            my_size += 1 + 1;
        }
        if !self.criu_image_path.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.criu_image_path);
        }
        if !self.criu_work_path.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.criu_work_path);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.no_pivot_root != false {
            os.write_bool(1, self.no_pivot_root)?;
        }
        if self.no_new_keyring != false {
            os.write_bool(2, self.no_new_keyring)?;
        }
        if !self.shim_cgroup.is_empty() {
            os.write_string(3, &self.shim_cgroup)?;
        }
        if self.io_uid != 0 {
            os.write_uint32(4, self.io_uid)?;
        }
        if self.io_gid != 0 {
            os.write_uint32(5, self.io_gid)?;
        }
        if !self.binary_name.is_empty() {
            os.write_string(6, &self.binary_name)?;
        }
        if !self.root.is_empty() {
            os.write_string(7, &self.root)?;
        }
        if !self.criu_path.is_empty() {
            os.write_string(8, &self.criu_path)?;
        }
        if self.systemd_cgroup != false {
            os.write_bool(9, self.systemd_cgroup)?;
        }
        if !self.criu_image_path.is_empty() {
            os.write_string(10, &self.criu_image_path)?;
        }
        if !self.criu_work_path.is_empty() {
            os.write_string(11, &self.criu_work_path)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Options {
        Options::new()
    }

    fn clear(&mut self) {
        self.no_pivot_root = false;
        self.no_new_keyring = false;
        self.shim_cgroup.clear();
        self.io_uid = 0;
        self.io_gid = 0;
        self.binary_name.clear();
        self.root.clear();
        self.criu_path.clear();
        self.systemd_cgroup = false;
        self.criu_image_path.clear();
        self.criu_work_path.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Options {
        static instance: Options = Options {
            no_pivot_root: false,
            no_new_keyring: false,
            shim_cgroup: ::std::string::String::new(),
            io_uid: 0,
            io_gid: 0,
            binary_name: ::std::string::String::new(),
            root: ::std::string::String::new(),
            criu_path: ::std::string::String::new(),
            systemd_cgroup: false,
            criu_image_path: ::std::string::String::new(),
            criu_work_path: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Options {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Options").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Options {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Options {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:containerd.runc.v1.CheckpointOptions)
pub struct CheckpointOptions {
    // message fields
    // @@protoc_insertion_point(field:containerd.runc.v1.CheckpointOptions.exit)
    pub exit: bool,
    // @@protoc_insertion_point(field:containerd.runc.v1.CheckpointOptions.open_tcp)
    pub open_tcp: bool,
    // @@protoc_insertion_point(field:containerd.runc.v1.CheckpointOptions.external_unix_sockets)
    pub external_unix_sockets: bool,
    // @@protoc_insertion_point(field:containerd.runc.v1.CheckpointOptions.terminal)
    pub terminal: bool,
    // @@protoc_insertion_point(field:containerd.runc.v1.CheckpointOptions.file_locks)
    pub file_locks: bool,
    // @@protoc_insertion_point(field:containerd.runc.v1.CheckpointOptions.empty_namespaces)
    pub empty_namespaces: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:containerd.runc.v1.CheckpointOptions.cgroups_mode)
    pub cgroups_mode: ::std::string::String,
    // @@protoc_insertion_point(field:containerd.runc.v1.CheckpointOptions.image_path)
    pub image_path: ::std::string::String,
    // @@protoc_insertion_point(field:containerd.runc.v1.CheckpointOptions.work_path)
    pub work_path: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:containerd.runc.v1.CheckpointOptions.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CheckpointOptions {
    fn default() -> &'a CheckpointOptions {
        <CheckpointOptions as ::protobuf::Message>::default_instance()
    }
}

impl CheckpointOptions {
    pub fn new() -> CheckpointOptions {
        ::std::default::Default::default()
    }

    // bool exit = 1;

    pub fn exit(&self) -> bool {
        self.exit
    }

    pub fn clear_exit(&mut self) {
        self.exit = false;
    }

    // Param is passed by value, moved
    pub fn set_exit(&mut self, v: bool) {
        self.exit = v;
    }

    // bool open_tcp = 2;

    pub fn open_tcp(&self) -> bool {
        self.open_tcp
    }

    pub fn clear_open_tcp(&mut self) {
        self.open_tcp = false;
    }

    // Param is passed by value, moved
    pub fn set_open_tcp(&mut self, v: bool) {
        self.open_tcp = v;
    }

    // bool external_unix_sockets = 3;

    pub fn external_unix_sockets(&self) -> bool {
        self.external_unix_sockets
    }

    pub fn clear_external_unix_sockets(&mut self) {
        self.external_unix_sockets = false;
    }

    // Param is passed by value, moved
    pub fn set_external_unix_sockets(&mut self, v: bool) {
        self.external_unix_sockets = v;
    }

    // bool terminal = 4;

    pub fn terminal(&self) -> bool {
        self.terminal
    }

    pub fn clear_terminal(&mut self) {
        self.terminal = false;
    }

    // Param is passed by value, moved
    pub fn set_terminal(&mut self, v: bool) {
        self.terminal = v;
    }

    // bool file_locks = 5;

    pub fn file_locks(&self) -> bool {
        self.file_locks
    }

    pub fn clear_file_locks(&mut self) {
        self.file_locks = false;
    }

    // Param is passed by value, moved
    pub fn set_file_locks(&mut self, v: bool) {
        self.file_locks = v;
    }

    // repeated string empty_namespaces = 6;

    pub fn empty_namespaces(&self) -> &[::std::string::String] {
        &self.empty_namespaces
    }

    pub fn clear_empty_namespaces(&mut self) {
        self.empty_namespaces.clear();
    }

    // Param is passed by value, moved
    pub fn set_empty_namespaces(&mut self, v: ::std::vec::Vec<::std::string::String>) {
        self.empty_namespaces = v;
    }

    // Mutable pointer to the field.
    pub fn mut_empty_namespaces(&mut self) -> &mut ::std::vec::Vec<::std::string::String> {
        &mut self.empty_namespaces
    }

    // Take field
    pub fn take_empty_namespaces(&mut self) -> ::std::vec::Vec<::std::string::String> {
        ::std::mem::replace(&mut self.empty_namespaces, ::std::vec::Vec::new())
    }

    // string cgroups_mode = 7;

    pub fn cgroups_mode(&self) -> &str {
        &self.cgroups_mode
    }

    pub fn clear_cgroups_mode(&mut self) {
        self.cgroups_mode.clear();
    }

    // Param is passed by value, moved
    pub fn set_cgroups_mode(&mut self, v: ::std::string::String) {
        self.cgroups_mode = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cgroups_mode(&mut self) -> &mut ::std::string::String {
        &mut self.cgroups_mode
    }

    // Take field
    pub fn take_cgroups_mode(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cgroups_mode, ::std::string::String::new())
    }

    // string image_path = 8;

    pub fn image_path(&self) -> &str {
        &self.image_path
    }

    pub fn clear_image_path(&mut self) {
        self.image_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_image_path(&mut self, v: ::std::string::String) {
        self.image_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_image_path(&mut self) -> &mut ::std::string::String {
        &mut self.image_path
    }

    // Take field
    pub fn take_image_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.image_path, ::std::string::String::new())
    }

    // string work_path = 9;

    pub fn work_path(&self) -> &str {
        &self.work_path
    }

    pub fn clear_work_path(&mut self) {
        self.work_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_work_path(&mut self, v: ::std::string::String) {
        self.work_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_work_path(&mut self) -> &mut ::std::string::String {
        &mut self.work_path
    }

    // Take field
    pub fn take_work_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.work_path, ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "exit",
            |m: &CheckpointOptions| { &m.exit },
            |m: &mut CheckpointOptions| { &mut m.exit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "open_tcp",
            |m: &CheckpointOptions| { &m.open_tcp },
            |m: &mut CheckpointOptions| { &mut m.open_tcp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "external_unix_sockets",
            |m: &CheckpointOptions| { &m.external_unix_sockets },
            |m: &mut CheckpointOptions| { &mut m.external_unix_sockets },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "terminal",
            |m: &CheckpointOptions| { &m.terminal },
            |m: &mut CheckpointOptions| { &mut m.terminal },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "file_locks",
            |m: &CheckpointOptions| { &m.file_locks },
            |m: &mut CheckpointOptions| { &mut m.file_locks },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "empty_namespaces",
            |m: &CheckpointOptions| { &m.empty_namespaces },
            |m: &mut CheckpointOptions| { &mut m.empty_namespaces },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cgroups_mode",
            |m: &CheckpointOptions| { &m.cgroups_mode },
            |m: &mut CheckpointOptions| { &mut m.cgroups_mode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "image_path",
            |m: &CheckpointOptions| { &m.image_path },
            |m: &mut CheckpointOptions| { &mut m.image_path },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "work_path",
            |m: &CheckpointOptions| { &m.work_path },
            |m: &mut CheckpointOptions| { &mut m.work_path },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CheckpointOptions>(
            "CheckpointOptions",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CheckpointOptions {
    const NAME: &'static str = "CheckpointOptions";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.exit = is.read_bool()?;
                },
                16 => {
                    self.open_tcp = is.read_bool()?;
                },
                24 => {
                    self.external_unix_sockets = is.read_bool()?;
                },
                32 => {
                    self.terminal = is.read_bool()?;
                },
                40 => {
                    self.file_locks = is.read_bool()?;
                },
                50 => {
                    self.empty_namespaces.push(is.read_string()?);
                },
                58 => {
                    self.cgroups_mode = is.read_string()?;
                },
                66 => {
                    self.image_path = is.read_string()?;
                },
                74 => {
                    self.work_path = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.exit != false {
            my_size += 1 + 1;
        }
        if self.open_tcp != false {
            my_size += 1 + 1;
        }
        if self.external_unix_sockets != false {
            my_size += 1 + 1;
        }
        if self.terminal != false {
            my_size += 1 + 1;
        }
        if self.file_locks != false {
            my_size += 1 + 1;
        }
        for value in &self.empty_namespaces {
            my_size += ::protobuf::rt::string_size(6, &value);
        };
        if !self.cgroups_mode.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.cgroups_mode);
        }
        if !self.image_path.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.image_path);
        }
        if !self.work_path.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.work_path);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.exit != false {
            os.write_bool(1, self.exit)?;
        }
        if self.open_tcp != false {
            os.write_bool(2, self.open_tcp)?;
        }
        if self.external_unix_sockets != false {
            os.write_bool(3, self.external_unix_sockets)?;
        }
        if self.terminal != false {
            os.write_bool(4, self.terminal)?;
        }
        if self.file_locks != false {
            os.write_bool(5, self.file_locks)?;
        }
        for v in &self.empty_namespaces {
            os.write_string(6, &v)?;
        };
        if !self.cgroups_mode.is_empty() {
            os.write_string(7, &self.cgroups_mode)?;
        }
        if !self.image_path.is_empty() {
            os.write_string(8, &self.image_path)?;
        }
        if !self.work_path.is_empty() {
            os.write_string(9, &self.work_path)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CheckpointOptions {
        CheckpointOptions::new()
    }

    fn clear(&mut self) {
        self.exit = false;
        self.open_tcp = false;
        self.external_unix_sockets = false;
        self.terminal = false;
        self.file_locks = false;
        self.empty_namespaces.clear();
        self.cgroups_mode.clear();
        self.image_path.clear();
        self.work_path.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CheckpointOptions {
        static instance: CheckpointOptions = CheckpointOptions {
            exit: false,
            open_tcp: false,
            external_unix_sockets: false,
            terminal: false,
            file_locks: false,
            empty_namespaces: ::std::vec::Vec::new(),
            cgroups_mode: ::std::string::String::new(),
            image_path: ::std::string::String::new(),
            work_path: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CheckpointOptions {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CheckpointOptions").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CheckpointOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CheckpointOptions {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:containerd.runc.v1.ProcessDetails)
pub struct ProcessDetails {
    // message fields
    // @@protoc_insertion_point(field:containerd.runc.v1.ProcessDetails.exec_id)
    pub exec_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:containerd.runc.v1.ProcessDetails.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProcessDetails {
    fn default() -> &'a ProcessDetails {
        <ProcessDetails as ::protobuf::Message>::default_instance()
    }
}

impl ProcessDetails {
    pub fn new() -> ProcessDetails {
        ::std::default::Default::default()
    }

    // string exec_id = 1;

    pub fn exec_id(&self) -> &str {
        &self.exec_id
    }

    pub fn clear_exec_id(&mut self) {
        self.exec_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_exec_id(&mut self, v: ::std::string::String) {
        self.exec_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_exec_id(&mut self) -> &mut ::std::string::String {
        &mut self.exec_id
    }

    // Take field
    pub fn take_exec_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.exec_id, ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "exec_id",
            |m: &ProcessDetails| { &m.exec_id },
            |m: &mut ProcessDetails| { &mut m.exec_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ProcessDetails>(
            "ProcessDetails",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ProcessDetails {
    const NAME: &'static str = "ProcessDetails";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.exec_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.exec_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.exec_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.exec_id.is_empty() {
            os.write_string(1, &self.exec_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProcessDetails {
        ProcessDetails::new()
    }

    fn clear(&mut self) {
        self.exec_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProcessDetails {
        static instance: ProcessDetails = ProcessDetails {
            exec_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ProcessDetails {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProcessDetails").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProcessDetails {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProcessDetails {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \nBgithub.com/containerd/containerd/runtime/v2/runc/options/oci.proto\
    \x12\x12containerd.runc.v1\x1a\x14gogoproto/gogo.protoX\0\"\xe9\x02\n\
    \x07Options\x12\"\n\rno_pivot_root\x18\x01\x20\x01(\x08R\x0bnoPivotRoot\
    \x12$\n\x0eno_new_keyring\x18\x02\x20\x01(\x08R\x0cnoNewKeyring\x12\x1f\
    \n\x0bshim_cgroup\x18\x03\x20\x01(\tR\nshimCgroup\x12\x15\n\x06io_uid\
    \x18\x04\x20\x01(\rR\x05ioUid\x12\x15\n\x06io_gid\x18\x05\x20\x01(\rR\
    \x05ioGid\x12\x1f\n\x0bbinary_name\x18\x06\x20\x01(\tR\nbinaryName\x12\
    \x12\n\x04root\x18\x07\x20\x01(\tR\x04root\x12\x1b\n\tcriu_path\x18\x08\
    \x20\x01(\tR\x08criuPath\x12%\n\x0esystemd_cgroup\x18\t\x20\x01(\x08R\rs\
    ystemdCgroup\x12&\n\x0fcriu_image_path\x18\n\x20\x01(\tR\rcriuImagePath\
    \x12$\n\x0ecriu_work_path\x18\x0b\x20\x01(\tR\x0ccriuWorkPath\"\xbb\x02\
    \n\x11CheckpointOptions\x12\x12\n\x04exit\x18\x01\x20\x01(\x08R\x04exit\
    \x12\x19\n\x08open_tcp\x18\x02\x20\x01(\x08R\x07openTcp\x122\n\x15extern\
    al_unix_sockets\x18\x03\x20\x01(\x08R\x13externalUnixSockets\x12\x1a\n\
    \x08terminal\x18\x04\x20\x01(\x08R\x08terminal\x12\x1d\n\nfile_locks\x18\
    \x05\x20\x01(\x08R\tfileLocks\x12)\n\x10empty_namespaces\x18\x06\x20\x03\
    (\tR\x0femptyNamespaces\x12!\n\x0ccgroups_mode\x18\x07\x20\x01(\tR\x0bcg\
    roupsMode\x12\x1d\n\nimage_path\x18\x08\x20\x01(\tR\timagePath\x12\x1b\n\
    \twork_path\x18\t\x20\x01(\tR\x08workPath\")\n\x0eProcessDetails\x12\x17\
    \n\x07exec_id\x18\x01\x20\x01(\tR\x06execIdBBZ@github.com/containerd/con\
    tainerd/runtime/v2/runc/options;optionsb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::gogo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(Options::generated_message_descriptor_data());
            messages.push(CheckpointOptions::generated_message_descriptor_data());
            messages.push(ProcessDetails::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
