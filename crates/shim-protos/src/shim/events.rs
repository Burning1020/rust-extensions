// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `github.com/containerd/containerd/api/services/ttrpc/events/v1/events.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:containerd.services.events.ttrpc.v1.ForwardRequest)
pub struct ForwardRequest {
    // message fields
    // @@protoc_insertion_point(field:containerd.services.events.ttrpc.v1.ForwardRequest.envelope)
    pub envelope: ::protobuf::MessageField<Envelope>,
    // special fields
    // @@protoc_insertion_point(special_field:containerd.services.events.ttrpc.v1.ForwardRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ForwardRequest {
    fn default() -> &'a ForwardRequest {
        <ForwardRequest as ::protobuf::Message>::default_instance()
    }
}

impl ForwardRequest {
    pub fn new() -> ForwardRequest {
        ::std::default::Default::default()
    }

    // .containerd.services.events.ttrpc.v1.Envelope envelope = 1;

    pub fn envelope(&self) -> &Envelope {
        self.envelope.as_ref().unwrap_or_else(|| <Envelope as ::protobuf::Message>::default_instance())
    }

    pub fn clear_envelope(&mut self) {
        self.envelope.clear();
    }

    pub fn has_envelope(&self) -> bool {
        self.envelope.is_some()
    }

    // Param is passed by value, moved
    pub fn set_envelope(&mut self, v: Envelope) {
        self.envelope = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_envelope(&mut self) -> &mut Envelope {
        self.envelope.mut_or_insert_default()
    }

    // Take field
    pub fn take_envelope(&mut self) -> Envelope {
        self.envelope.take().unwrap_or_else(|| Envelope::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Envelope>(
            "envelope",
            |m: &ForwardRequest| { &m.envelope },
            |m: &mut ForwardRequest| { &mut m.envelope },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ForwardRequest>(
            "ForwardRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ForwardRequest {
    const NAME: &'static str = "ForwardRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.envelope)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.envelope.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.envelope.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ForwardRequest {
        ForwardRequest::new()
    }

    fn clear(&mut self) {
        self.envelope.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ForwardRequest {
        static instance: ForwardRequest = ForwardRequest {
            envelope: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ForwardRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ForwardRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ForwardRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ForwardRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:containerd.services.events.ttrpc.v1.Envelope)
pub struct Envelope {
    // message fields
    // @@protoc_insertion_point(field:containerd.services.events.ttrpc.v1.Envelope.timestamp)
    pub timestamp: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:containerd.services.events.ttrpc.v1.Envelope.namespace)
    pub namespace: ::std::string::String,
    // @@protoc_insertion_point(field:containerd.services.events.ttrpc.v1.Envelope.topic)
    pub topic: ::std::string::String,
    // @@protoc_insertion_point(field:containerd.services.events.ttrpc.v1.Envelope.event)
    pub event: ::protobuf::MessageField<::protobuf::well_known_types::any::Any>,
    // special fields
    // @@protoc_insertion_point(special_field:containerd.services.events.ttrpc.v1.Envelope.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Envelope {
    fn default() -> &'a Envelope {
        <Envelope as ::protobuf::Message>::default_instance()
    }
}

impl Envelope {
    pub fn new() -> Envelope {
        ::std::default::Default::default()
    }

    // .google.protobuf.Timestamp timestamp = 1;

    pub fn timestamp(&self) -> &::protobuf::well_known_types::timestamp::Timestamp {
        self.timestamp.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::timestamp::Timestamp as ::protobuf::Message>::default_instance())
    }

    pub fn clear_timestamp(&mut self) {
        self.timestamp.clear();
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: ::protobuf::well_known_types::timestamp::Timestamp) {
        self.timestamp = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp(&mut self) -> &mut ::protobuf::well_known_types::timestamp::Timestamp {
        self.timestamp.mut_or_insert_default()
    }

    // Take field
    pub fn take_timestamp(&mut self) -> ::protobuf::well_known_types::timestamp::Timestamp {
        self.timestamp.take().unwrap_or_else(|| ::protobuf::well_known_types::timestamp::Timestamp::new())
    }

    // string namespace = 2;

    pub fn namespace(&self) -> &str {
        &self.namespace
    }

    pub fn clear_namespace(&mut self) {
        self.namespace.clear();
    }

    // Param is passed by value, moved
    pub fn set_namespace(&mut self, v: ::std::string::String) {
        self.namespace = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_namespace(&mut self) -> &mut ::std::string::String {
        &mut self.namespace
    }

    // Take field
    pub fn take_namespace(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.namespace, ::std::string::String::new())
    }

    // string topic = 3;

    pub fn topic(&self) -> &str {
        &self.topic
    }

    pub fn clear_topic(&mut self) {
        self.topic.clear();
    }

    // Param is passed by value, moved
    pub fn set_topic(&mut self, v: ::std::string::String) {
        self.topic = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_topic(&mut self) -> &mut ::std::string::String {
        &mut self.topic
    }

    // Take field
    pub fn take_topic(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.topic, ::std::string::String::new())
    }

    // .google.protobuf.Any event = 4;

    pub fn event(&self) -> &::protobuf::well_known_types::any::Any {
        self.event.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::any::Any as ::protobuf::Message>::default_instance())
    }

    pub fn clear_event(&mut self) {
        self.event.clear();
    }

    pub fn has_event(&self) -> bool {
        self.event.is_some()
    }

    // Param is passed by value, moved
    pub fn set_event(&mut self, v: ::protobuf::well_known_types::any::Any) {
        self.event = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_event(&mut self) -> &mut ::protobuf::well_known_types::any::Any {
        self.event.mut_or_insert_default()
    }

    // Take field
    pub fn take_event(&mut self) -> ::protobuf::well_known_types::any::Any {
        self.event.take().unwrap_or_else(|| ::protobuf::well_known_types::any::Any::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "timestamp",
            |m: &Envelope| { &m.timestamp },
            |m: &mut Envelope| { &mut m.timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "namespace",
            |m: &Envelope| { &m.namespace },
            |m: &mut Envelope| { &mut m.namespace },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "topic",
            |m: &Envelope| { &m.topic },
            |m: &mut Envelope| { &mut m.topic },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::any::Any>(
            "event",
            |m: &Envelope| { &m.event },
            |m: &mut Envelope| { &mut m.event },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Envelope>(
            "Envelope",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Envelope {
    const NAME: &'static str = "Envelope";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.timestamp)?;
                },
                18 => {
                    self.namespace = is.read_string()?;
                },
                26 => {
                    self.topic = is.read_string()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.event)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.namespace.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.namespace);
        }
        if !self.topic.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.topic);
        }
        if let Some(v) = self.event.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.namespace.is_empty() {
            os.write_string(2, &self.namespace)?;
        }
        if !self.topic.is_empty() {
            os.write_string(3, &self.topic)?;
        }
        if let Some(v) = self.event.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Envelope {
        Envelope::new()
    }

    fn clear(&mut self) {
        self.timestamp.clear();
        self.namespace.clear();
        self.topic.clear();
        self.event.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Envelope {
        static instance: Envelope = Envelope {
            timestamp: ::protobuf::MessageField::none(),
            namespace: ::std::string::String::new(),
            topic: ::std::string::String::new(),
            event: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Envelope {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Envelope").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Envelope {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Envelope {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \nJgithub.com/containerd/containerd/api/services/ttrpc/events/v1/events.\
    proto\x12#containerd.services.events.ttrpc.v1\x1a@github.com/containerd/\
    containerd/protobuf/plugin/fieldpath.proto\x1a\x14gogoproto/gogo.proto\
    \x1a\x19google/protobuf/any.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a\
    \x1fgoogle/protobuf/timestamp.protoX\0X\x01\"[\n\x0eForwardRequest\x12I\
    \n\x08envelope\x18\x01\x20\x01(\x0b2-.containerd.services.events.ttrpc.v\
    1.EnvelopeR\x08envelope\"\xb4\x01\n\x08Envelope\x12B\n\ttimestamp\x18\
    \x01\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\ttimestampB\x08\x90\
    \xdf\x1f\x01\xc8\xde\x1f\0\x12\x1c\n\tnamespace\x18\x02\x20\x01(\tR\tnam\
    espace\x12\x14\n\x05topic\x18\x03\x20\x01(\tR\x05topic\x12*\n\x05event\
    \x18\x04\x20\x01(\x0b2\x14.google.protobuf.AnyR\x05event:\x04\x80\xb9\
    \x1f\x012`\n\x06Events\x12V\n\x07Forward\x123.containerd.services.events\
    .ttrpc.v1.ForwardRequest\x1a\x16.google.protobuf.EmptyBFZDgithub.com/con\
    tainerd/containerd/api/services/ttrpc/events/v1;eventsb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::fieldpath::file_descriptor().clone());
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::any::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::empty::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(ForwardRequest::generated_message_descriptor_data());
            messages.push(Envelope::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
